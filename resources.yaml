apiVersion: v1
items:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: trustgraph
  spec: {}
- apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    name: tg
  parameters:
    availability: nova
    fsType: ext4
    type: high-speed
  provisioner: cinder.csi.openstack.org
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
- apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    name: tg
  parameters:
    availability: nova
    fsType: ext4
    type: high-speed
  provisioner: cinder.csi.openstack.org
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
- apiVersion: v1
  kind: Namespace
  metadata:
    name: trustgraph
  spec: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: agent-manager
    name: agent-manager
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agent-manager
    template:
      metadata:
        labels:
          app: agent-manager
      spec:
        containers:
        - command:
          - agent-manager-react
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: agent-manager
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: agent-manager
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: agent-manager
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: api-gateway
    name: api-gateway
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: api-gateway
    template:
      metadata:
        labels:
          app: api-gateway
      spec:
        containers:
        - command:
          - api-gateway
          - -p
          - pulsar://pulsar:6650
          - --timeout
          - '600'
          - --port
          - '8088'
          - --log-level
          - DEBUG
          env:
          - name: GATEWAY_SECRET
            valueFrom:
              secretKeyRef:
                key: gateway-secret
                name: gateway-secret
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: api-gateway
          ports:
          - containerPort: 8088
            hostPort: 8088
          resources:
            limits:
              cpu: '0.5'
              memory: 256M
            requests:
              cpu: '0.1'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: api-gateway
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    - name: api
      port: 8088
      targetPort: 8088
    selector:
      app: api-gateway
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: cassandra
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: cassandra
    name: cassandra
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cassandra
    template:
      metadata:
        labels:
          app: cassandra
      spec:
        containers:
        - env:
          - name: JVM_OPTS
            value: -Xms300M -Xmx300M -Dcassandra.skip_wait_for_gossip_to_settle=0
          image: docker.io/cassandra:4.1.9
          name: cassandra
          ports:
          - containerPort: 9042
            hostPort: 9042
          resources:
            limits:
              cpu: '1.0'
              memory: 1000M
            requests:
              cpu: '0.5'
              memory: 1000M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /var/lib/cassandra
            name: cassandra
        volumes:
        - name: cassandra
          persistentVolumeClaim:
            claimName: cassandra
- apiVersion: v1
  kind: Service
  metadata:
    name: cassandra
    namespace: trustgraph
  spec:
    ports:
    - name: api
      port: 9042
      targetPort: 9042
    selector:
      app: cassandra
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: chunker
    name: chunker
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: chunker
    template:
      metadata:
        labels:
          app: chunker
      spec:
        containers:
        - command:
          - chunker-recursive
          - -p
          - pulsar://pulsar:6650
          - --chunk-size
          - '2000'
          - --chunk-overlap
          - '100'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: chunker
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: chunker
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: chunker
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: config-svc
    name: config-svc
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: config-svc
    template:
      metadata:
        labels:
          app: config-svc
      spec:
        containers:
        - command:
          - config-svc
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: config-svc
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: config-svc
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: config-svc
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ddg-mcp-server
    name: ddg-mcp-server
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ddg-mcp-server
    template:
      metadata:
        labels:
          app: ddg-mcp-server
      spec:
        containers:
        - image: docker.io/trustgraph/ddg-mcp-server:0.1.0
          name: ddg-mcp-server
          ports:
          - containerPort: 9870
            hostPort: 9870
          resources:
            limits:
              cpu: '0.5'
              memory: 256M
            requests:
              cpu: '0.1'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: ddg-mcp-server
    namespace: trustgraph
  spec:
    ports:
    - name: mcp
      port: 9870
      targetPort: 9870
    selector:
      app: ddg-mcp-server
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: document-embeddings
    name: document-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: document-embeddings
    template:
      metadata:
        labels:
          app: document-embeddings
      spec:
        containers:
        - command:
          - document-embeddings
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: document-embeddings
          resources:
            limits:
              cpu: '1.0'
              memory: 512M
            requests:
              cpu: '0.5'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: document-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: document-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: document-rag
    name: document-rag
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: document-rag
    template:
      metadata:
        labels:
          app: document-rag
      spec:
        containers:
        - command:
          - document-rag
          - -p
          - pulsar://pulsar:6650
          - --doc-limit
          - '20'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: document-rag
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: document-rag
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: document-rag
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: embeddings
    name: embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: embeddings
    template:
      metadata:
        labels:
          app: embeddings
      spec:
        containers:
        - command:
          - embeddings-fastembed
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - -m
          - sentence-transformers/all-MiniLM-L6-v2
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: embeddings
          resources:
            limits:
              cpu: '1.0'
              memory: 400M
            requests:
              cpu: '0.5'
              memory: 400M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: embeddings
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: grafana-storage
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: v1
  data:
    dashboard.yml: "\napiVersion: 1\n\nproviders:\n\n  - name: 'trustgraph.ai'\n \
      \   orgId: 1\n    folder: 'TrustGraph'\n    folderUid: 'b6c5be90-d432-4df8-aeab-737c7b151228'\n\
      \    type: file\n    disableDeletion: false\n    updateIntervalSeconds: 30\n\
      \    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\n\
      \      foldersFromFilesStructure: false\n\n"
  kind: ConfigMap
  metadata:
    name: prov-dash
    namespace: trustgraph
- apiVersion: v1
  data:
    datasource.yml: "apiVersion: 1\n\nprune: true\n\ndatasources:\n  - name: Prometheus\n\
      \    type: prometheus\n    access: proxy\n    orgId: 1\n    # <string> Sets\
      \ a custom UID to reference this\n    # data source in other parts of the configuration.\n\
      \    # If not specified, Grafana generates one.\n    uid: 'f6b18033-5918-4e05-a1ca-4cb30343b129'\n\
      \n    url: http://prometheus:9090\n\n    basicAuth: false\n    withCredentials:\
      \ false\n    isDefault: true\n    editable: true\n\n"
  kind: ConfigMap
  metadata:
    name: prov-data
    namespace: trustgraph
- apiVersion: v1
  data:
    dashboard.json: "{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"\
      builtIn\": 1,\n        \"datasource\": {\n          \"type\": \"grafana\",\n\
      \          \"uid\": \"-- Grafana --\"\n        },\n        \"enable\": true,\n\
      \        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n\
      \        \"name\": \"Annotations & Alerts\",\n        \"type\": \"dashboard\"\
      \n      }\n    ]\n  },\n  \"editable\": true,\n  \"fiscalYearStartMonth\": 0,\n\
      \  \"graphTooltip\": 0,\n  \"id\": 2,\n  \"links\": [],\n  \"liveNow\": false,\n\
      \  \"panels\": [\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\"\
      ,\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n   \
      \   \"fieldConfig\": {\n        \"defaults\": {\n          \"custom\": {\n \
      \           \"hideFrom\": {\n              \"legend\": false,\n            \
      \  \"tooltip\": false,\n              \"viz\": false\n            },\n     \
      \       \"scaleDistribution\": {\n              \"type\": \"linear\"\n     \
      \       }\n          }\n        },\n        \"overrides\": []\n      },\n  \
      \    \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n\
      \        \"y\": 0\n      },\n      \"id\": 7,\n      \"options\": {\n      \
      \  \"calculate\": false,\n        \"cellGap\": 1,\n        \"color\": {\n  \
      \        \"exponent\": 0.5,\n          \"fill\": \"dark-orange\",\n        \
      \  \"mode\": \"scheme\",\n          \"reverse\": false,\n          \"scale\"\
      : \"exponential\",\n          \"scheme\": \"Oranges\",\n          \"steps\"\
      : 64\n        },\n        \"exemplars\": {\n          \"color\": \"rgba(255,0,255,0.7)\"\
      \n        },\n        \"filterValues\": {\n          \"le\": 1e-9\n        },\n\
      \        \"legend\": {\n          \"show\": true\n        },\n        \"rowsFrame\"\
      : {\n          \"layout\": \"auto\"\n        },\n        \"tooltip\": {\n  \
      \        \"mode\": \"single\",\n          \"showColorScale\": false,\n     \
      \     \"yHistogram\": false\n        },\n        \"yAxis\": {\n          \"\
      axisPlacement\": \"left\",\n          \"reverse\": false\n        }\n      },\n\
      \      \"pluginVersion\": \"11.1.4\",\n      \"targets\": [\n        {\n   \
      \       \"datasource\": {\n            \"type\": \"prometheus\",\n         \
      \   \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n          },\n      \
      \    \"disableTextWrap\": false,\n          \"editorMode\": \"builder\",\n \
      \         \"exemplar\": false,\n          \"expr\": \"sum by(le) (rate(text_completion_duration_bucket[$__rate_interval]))\"\
      ,\n          \"format\": \"heatmap\",\n          \"fullMetaSearch\": false,\n\
      \          \"includeNullMetadata\": true,\n          \"instant\": false,\n \
      \         \"legendFormat\": \"99%\",\n          \"range\": true,\n         \
      \ \"refId\": \"A\",\n          \"useBackend\": false\n        }\n      ],\n\
      \      \"title\": \"LLM latency\",\n      \"type\": \"heatmap\"\n    },\n  \
      \  {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"\
      uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n      \"fieldConfig\"\
      : {\n        \"defaults\": {\n          \"custom\": {\n            \"hideFrom\"\
      : {\n              \"legend\": false,\n              \"tooltip\": false,\n \
      \             \"viz\": false\n            },\n            \"scaleDistribution\"\
      : {\n              \"type\": \"linear\"\n            }\n          }\n      \
      \  },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"\
      h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 0\n      },\n\
      \      \"id\": 2,\n      \"options\": {\n        \"calculate\": false,\n   \
      \     \"cellGap\": 5,\n        \"cellValues\": {\n          \"unit\": \"\"\n\
      \        },\n        \"color\": {\n          \"exponent\": 0.5,\n          \"\
      fill\": \"dark-orange\",\n          \"mode\": \"scheme\",\n          \"reverse\"\
      : false,\n          \"scale\": \"exponential\",\n          \"scheme\": \"Oranges\"\
      ,\n          \"steps\": 64\n        },\n        \"exemplars\": {\n         \
      \ \"color\": \"rgba(255,0,255,0.7)\"\n        },\n        \"filterValues\":\
      \ {\n          \"le\": 1e-9\n        },\n        \"legend\": {\n          \"\
      show\": true\n        },\n        \"rowsFrame\": {\n          \"layout\": \"\
      auto\"\n        },\n        \"tooltip\": {\n          \"mode\": \"single\",\n\
      \          \"showColorScale\": false,\n          \"yHistogram\": false\n   \
      \     },\n        \"yAxis\": {\n          \"axisLabel\": \"processing status\"\
      ,\n          \"axisPlacement\": \"left\",\n          \"reverse\": false\n  \
      \      }\n      },\n      \"pluginVersion\": \"11.1.4\",\n      \"targets\"\
      : [\n        {\n          \"datasource\": {\n            \"type\": \"prometheus\"\
      ,\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n         \
      \ },\n          \"disableTextWrap\": false,\n          \"editorMode\": \"builder\"\
      ,\n          \"exemplar\": false,\n          \"expr\": \"sum by(status) (rate(processing_count_total{status!=\\\
      \"success\\\"}[$__rate_interval]))\",\n          \"format\": \"heatmap\",\n\
      \          \"fullMetaSearch\": false,\n          \"includeNullMetadata\": true,\n\
      \          \"instant\": false,\n          \"interval\": \"\",\n          \"\
      legendFormat\": \"{{status}}\",\n          \"range\": true,\n          \"refId\"\
      : \"A\",\n          \"useBackend\": false\n        }\n      ],\n      \"title\"\
      : \"Error rate\",\n      \"type\": \"heatmap\"\n    },\n    {\n      \"datasource\"\
      : {\n        \"type\": \"prometheus\",\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"\
      color\": {\n            \"mode\": \"palette-classic\"\n          },\n      \
      \    \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\"\
      : false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\"\
      : \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\"\
      : 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n\
      \            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n    \
      \          \"legend\": false,\n              \"tooltip\": false,\n         \
      \     \"viz\": false\n            },\n            \"insertNulls\": false,\n\
      \            \"lineInterpolation\": \"linear\",\n            \"lineWidth\":\
      \ 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n\
      \              \"type\": \"linear\"\n            },\n            \"showPoints\"\
      : \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n\
      \              \"group\": \"A\",\n              \"mode\": \"none\"\n       \
      \     },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\
      \n            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 9,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 8\n\
      \      },\n      \"id\": 1,\n      \"options\": {\n        \"legend\": {\n \
      \         \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"sum by(processor) (rate(request_latency_count{processor!=\\\
      \"config-svc\\\"}[$__rate_interval]))\",\n          \"fullMetaSearch\": false,\n\
      \          \"includeNullMetadata\": true,\n          \"instant\": false,\n \
      \         \"legendFormat\": \"{{job}}\",\n          \"range\": true,\n     \
      \     \"refId\": \"A\",\n          \"useBackend\": false\n        }\n      ],\n\
      \      \"title\": \"Request rate\",\n      \"type\": \"timeseries\"\n    },\n\
      \    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n       \
      \ \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n      \"fieldConfig\"\
      : {\n        \"defaults\": {\n          \"color\": {\n            \"mode\":\
      \ \"palette-classic\"\n          },\n          \"custom\": {\n            \"\
      axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n       \
      \     \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n     \
      \       \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n   \
      \         \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n      \
      \      \"gradientMode\": \"none\",\n            \"hideFrom\": {\n          \
      \    \"legend\": false,\n              \"tooltip\": false,\n              \"\
      viz\": false\n            },\n            \"insertNulls\": false,\n        \
      \    \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n   \
      \         \"pointSize\": 5,\n            \"scaleDistribution\": {\n        \
      \      \"type\": \"linear\"\n            },\n            \"showPoints\": \"\
      auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n  \
      \            \"group\": \"A\",\n              \"mode\": \"none\"\n         \
      \   },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n\
      \            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 9,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 8\n\
      \      },\n      \"id\": 5,\n      \"options\": {\n        \"legend\": {\n \
      \         \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"pluginVersion\": \"10.0.0\",\n      \"\
      targets\": [\n        {\n          \"datasource\": {\n            \"type\":\
      \ \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"pulsar_msg_backlog{topic!=\\\"persistent://tg/config/config\\\
      \"}\",\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\"\
      : true,\n          \"instant\": false,\n          \"legendFormat\": \"{{topic}}\"\
      ,\n          \"range\": true,\n          \"refId\": \"A\",\n          \"useBackend\"\
      : false\n        }\n      ],\n      \"title\": \"Pub/sub backlog\",\n      \"\
      type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\"\
      : \"prometheus\",\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"\
      color\": {\n            \"fixedColor\": \"semi-dark-green\",\n            \"\
      mode\": \"palette-classic-by-name\"\n          },\n          \"custom\": {\n\
      \            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n\
      \            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n\
      \            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n\
      \            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n    \
      \          \"legend\": false,\n              \"tooltip\": false,\n         \
      \     \"viz\": false\n            },\n            \"lineWidth\": 1,\n      \
      \      \"scaleDistribution\": {\n              \"type\": \"linear\"\n      \
      \      },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\
      \n            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 7,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 17\n\
      \      },\n      \"id\": 10,\n      \"options\": {\n        \"barRadius\": 0,\n\
      \        \"barWidth\": 0.97,\n        \"fullHighlight\": false,\n        \"\
      groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n      \
      \    \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n    \
      \      \"showLegend\": true\n        },\n        \"orientation\": \"auto\",\n\
      \        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n       \
      \ \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\
      \n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\"\
      : 0\n      },\n      \"pluginVersion\": \"11.1.4\",\n      \"targets\": [\n\
      \        {\n          \"datasource\": {\n            \"type\": \"prometheus\"\
      ,\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n         \
      \ },\n          \"disableTextWrap\": false,\n          \"editorMode\": \"builder\"\
      ,\n          \"exemplar\": false,\n          \"expr\": \"max by(le) (chunk_size_bucket)\"\
      ,\n          \"format\": \"heatmap\",\n          \"fullMetaSearch\": false,\n\
      \          \"includeNullMetadata\": false,\n          \"instant\": true,\n \
      \         \"legendFormat\": \"{{le}}\",\n          \"range\": false,\n     \
      \     \"refId\": \"A\",\n          \"useBackend\": false\n        }\n      ],\n\
      \      \"title\": \"Chunk size\",\n      \"type\": \"barchart\"\n    },\n  \
      \  {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n        \"\
      uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n      \"fieldConfig\"\
      : {\n        \"defaults\": {\n          \"color\": {\n            \"mode\":\
      \ \"palette-classic\"\n          },\n          \"custom\": {\n            \"\
      axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n       \
      \     \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n     \
      \       \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n   \
      \         \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n      \
      \      \"gradientMode\": \"none\",\n            \"hideFrom\": {\n          \
      \    \"legend\": false,\n              \"tooltip\": false,\n              \"\
      viz\": false\n            },\n            \"insertNulls\": false,\n        \
      \    \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n   \
      \         \"pointSize\": 5,\n            \"scaleDistribution\": {\n        \
      \      \"type\": \"linear\"\n            },\n            \"showPoints\": \"\
      auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n  \
      \            \"group\": \"A\",\n              \"mode\": \"none\"\n         \
      \   },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n\
      \            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 7,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 17\n\
      \      },\n      \"id\": 11,\n      \"options\": {\n        \"legend\": {\n\
      \          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"pluginVersion\": \"11.1.4\",\n      \"\
      targets\": [\n        {\n          \"datasource\": {\n            \"type\":\
      \ \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"exemplar\": false,\n          \"expr\": \"sum by(job)\
      \ (increase(rate_limit_count_total[$__rate_interval]))\",\n          \"format\"\
      : \"time_series\",\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\"\
      : true,\n          \"instant\": false,\n          \"legendFormat\": \"{{instance}}\"\
      ,\n          \"range\": true,\n          \"refId\": \"A\",\n          \"useBackend\"\
      : false\n        }\n      ],\n      \"title\": \"Rate limit events\",\n    \
      \  \"type\": \"timeseries\"\n    },\n    {\n      \"datasource\": {\n      \
      \  \"type\": \"prometheus\",\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"\
      color\": {\n            \"fixedColor\": \"light-blue\",\n            \"mode\"\
      : \"palette-classic\"\n          },\n          \"custom\": {\n            \"\
      axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n       \
      \     \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n     \
      \       \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n   \
      \         \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n      \
      \      \"gradientMode\": \"none\",\n            \"hideFrom\": {\n          \
      \    \"legend\": false,\n              \"tooltip\": false,\n              \"\
      viz\": false\n            },\n            \"insertNulls\": false,\n        \
      \    \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n   \
      \         \"pointSize\": 5,\n            \"scaleDistribution\": {\n        \
      \      \"type\": \"linear\"\n            },\n            \"showPoints\": \"\
      auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n  \
      \            \"group\": \"A\",\n              \"mode\": \"none\"\n         \
      \   },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n\
      \            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 24\n\
      \      },\n      \"id\": 12,\n      \"options\": {\n        \"legend\": {\n\
      \          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"pluginVersion\": \"11.1.4\",\n      \"\
      targets\": [\n        {\n          \"datasource\": {\n            \"type\":\
      \ \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"rate(process_cpu_seconds_total[$__rate_interval])\"\
      ,\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\":\
      \ true,\n          \"instant\": false,\n          \"legendFormat\": \"{{instance}}\"\
      ,\n          \"range\": true,\n          \"refId\": \"A\",\n          \"useBackend\"\
      : false\n        }\n      ],\n      \"title\": \"CPU\",\n      \"type\": \"\
      timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\"\
      ,\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n   \
      \   \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n  \
      \          \"mode\": \"palette-classic\"\n          },\n          \"custom\"\
      : {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\"\
      : false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\"\
      : \"GB\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\"\
      : 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n\
      \            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n    \
      \          \"legend\": false,\n              \"tooltip\": false,\n         \
      \     \"viz\": false\n            },\n            \"insertNulls\": false,\n\
      \            \"lineInterpolation\": \"linear\",\n            \"lineWidth\":\
      \ 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n\
      \              \"type\": \"linear\"\n            },\n            \"showPoints\"\
      : \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n\
      \              \"group\": \"A\",\n              \"mode\": \"none\"\n       \
      \     },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\
      \n            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 8,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 24\n\
      \      },\n      \"id\": 13,\n      \"options\": {\n        \"legend\": {\n\
      \          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"process_resident_memory_bytes / 1073741824\"\
      ,\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\":\
      \ true,\n          \"instant\": false,\n          \"legendFormat\": \"{{instance}}\"\
      ,\n          \"range\": true,\n          \"refId\": \"A\",\n          \"useBackend\"\
      : false\n        }\n      ],\n      \"title\": \"Memory\",\n      \"type\":\
      \ \"timeseries\"\n    },\n    {\n      \"datasource\": {\n        \"type\":\
      \ \"prometheus\",\n        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"\
      color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"\
      custom\": {\n            \"align\": \"auto\",\n            \"cellOptions\":\
      \ {\n              \"type\": \"auto\"\n            },\n            \"filterable\"\
      : false,\n            \"inspect\": false\n          },\n          \"mappings\"\
      : [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n  \
      \          \"steps\": [\n              {\n                \"color\": \"green\"\
      ,\n                \"value\": null\n              },\n              {\n    \
      \            \"color\": \"red\",\n                \"value\": 80\n          \
      \    }\n            ]\n          }\n        },\n        \"overrides\": []\n\
      \      },\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 8,\n    \
      \    \"x\": 0,\n        \"y\": 32\n      },\n      \"id\": 14,\n      \"options\"\
      : {\n        \"cellHeight\": \"sm\",\n        \"footer\": {\n          \"countRows\"\
      : false,\n          \"fields\": \"\",\n          \"reducer\": [\n          \
      \  \"sum\"\n          ],\n          \"show\": false\n        },\n        \"\
      showHeader\": true\n      },\n      \"pluginVersion\": \"11.1.4\",\n      \"\
      targets\": [\n        {\n          \"datasource\": {\n            \"type\":\
      \ \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"exemplar\": false,\n          \"expr\": \"last_over_time(params_info[$__interval])\"\
      ,\n          \"format\": \"table\",\n          \"fullMetaSearch\": false,\n\
      \          \"includeNullMetadata\": true,\n          \"instant\": true,\n  \
      \        \"legendFormat\": \"__auto\",\n          \"range\": false,\n      \
      \    \"refId\": \"A\",\n          \"useBackend\": false\n        }\n      ],\n\
      \      \"title\": \"Model parameters\",\n      \"transformations\": [\n    \
      \    {\n          \"id\": \"filterFieldsByName\",\n          \"options\": {\n\
      \            \"include\": {\n              \"names\": [\n                \"\
      model\",\n                \"job\"\n              ]\n            }\n        \
      \  }\n        },\n        {\n          \"id\": \"filterByValue\",\n        \
      \  \"options\": {\n            \"filters\": [\n              {\n           \
      \     \"config\": {\n                  \"id\": \"equal\",\n                \
      \  \"options\": {\n                    \"value\": \"\"\n                  }\n\
      \                },\n                \"fieldName\": \"model\"\n            \
      \  }\n            ],\n            \"match\": \"all\",\n            \"type\"\
      : \"exclude\"\n          }\n        }\n      ],\n      \"type\": \"table\"\n\
      \    },\n    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n\
      \        \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n     \
      \ \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n    \
      \        \"mode\": \"palette-classic\"\n          },\n          \"custom\":\
      \ {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\"\
      : false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\"\
      : \"\",\n            \"axisPlacement\": \"auto\",\n            \"barAlignment\"\
      : 0,\n            \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n\
      \            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n    \
      \          \"legend\": false,\n              \"tooltip\": false,\n         \
      \     \"viz\": false\n            },\n            \"insertNulls\": false,\n\
      \            \"lineInterpolation\": \"linear\",\n            \"lineWidth\":\
      \ 1,\n            \"pointSize\": 5,\n            \"scaleDistribution\": {\n\
      \              \"type\": \"linear\"\n            },\n            \"showPoints\"\
      : \"auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n\
      \              \"group\": \"A\",\n              \"mode\": \"none\"\n       \
      \     },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\
      \n            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 7,\n        \"w\": 8,\n        \"x\": 8,\n        \"y\": 32\n\
      \      },\n      \"id\": 15,\n      \"options\": {\n        \"legend\": {\n\
      \          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"sum by(job) (rate(input_tokens_total[$__rate_interval]))\"\
      ,\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\":\
      \ true,\n          \"instant\": false,\n          \"legendFormat\": \"input\
      \ {{job}}\",\n          \"range\": true,\n          \"refId\": \"A\",\n    \
      \      \"useBackend\": false\n        },\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"sum by(job) (rate(output_tokens_total[$__rate_interval]))\"\
      ,\n          \"fullMetaSearch\": false,\n          \"hide\": false,\n      \
      \    \"includeNullMetadata\": true,\n          \"instant\": false,\n       \
      \   \"legendFormat\": \"output {{job}}\",\n          \"range\": true,\n    \
      \      \"refId\": \"B\",\n          \"useBackend\": false\n        }\n     \
      \ ],\n      \"title\": \"Tokens\",\n      \"type\": \"timeseries\"\n    },\n\
      \    {\n      \"datasource\": {\n        \"type\": \"prometheus\",\n       \
      \ \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\n      },\n      \"fieldConfig\"\
      : {\n        \"defaults\": {\n          \"color\": {\n            \"mode\":\
      \ \"palette-classic\"\n          },\n          \"custom\": {\n            \"\
      axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n       \
      \     \"axisColorMode\": \"text\",\n            \"axisLabel\": \"$\",\n    \
      \        \"axisPlacement\": \"auto\",\n            \"barAlignment\": 0,\n  \
      \          \"drawStyle\": \"line\",\n            \"fillOpacity\": 0,\n     \
      \       \"gradientMode\": \"none\",\n            \"hideFrom\": {\n         \
      \     \"legend\": false,\n              \"tooltip\": false,\n              \"\
      viz\": false\n            },\n            \"insertNulls\": false,\n        \
      \    \"lineInterpolation\": \"linear\",\n            \"lineWidth\": 1,\n   \
      \         \"pointSize\": 5,\n            \"scaleDistribution\": {\n        \
      \      \"type\": \"linear\"\n            },\n            \"showPoints\": \"\
      auto\",\n            \"spanNulls\": false,\n            \"stacking\": {\n  \
      \            \"group\": \"A\",\n              \"mode\": \"none\"\n         \
      \   },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n\
      \            }\n          },\n          \"mappings\": [],\n          \"thresholds\"\
      : {\n            \"mode\": \"absolute\",\n            \"steps\": [\n       \
      \       {\n                \"color\": \"green\",\n                \"value\"\
      : null\n              },\n              {\n                \"color\": \"red\"\
      ,\n                \"value\": 80\n              }\n            ]\n         \
      \ }\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n\
      \        \"h\": 7,\n        \"w\": 8,\n        \"x\": 16,\n        \"y\": 32\n\
      \      },\n      \"id\": 16,\n      \"options\": {\n        \"legend\": {\n\
      \          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"\
      placement\": \"bottom\",\n          \"showLegend\": true\n        },\n     \
      \   \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"\
      none\"\n        }\n      },\n      \"targets\": [\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"sum by(job) (rate(input_cost_total[$__rate_interval]))\"\
      ,\n          \"fullMetaSearch\": false,\n          \"includeNullMetadata\":\
      \ true,\n          \"instant\": false,\n          \"legendFormat\": \"input\
      \ {{job}}\",\n          \"range\": true,\n          \"refId\": \"A\",\n    \
      \      \"useBackend\": false\n        },\n        {\n          \"datasource\"\
      : {\n            \"type\": \"prometheus\",\n            \"uid\": \"f6b18033-5918-4e05-a1ca-4cb30343b129\"\
      \n          },\n          \"disableTextWrap\": false,\n          \"editorMode\"\
      : \"builder\",\n          \"expr\": \"sum by(job) (rate(output_cost_total[$__rate_interval]))\"\
      ,\n          \"fullMetaSearch\": false,\n          \"hide\": false,\n      \
      \    \"includeNullMetadata\": true,\n          \"instant\": false,\n       \
      \   \"legendFormat\": \"output {{job}}\",\n          \"range\": true,\n    \
      \      \"refId\": \"B\",\n          \"useBackend\": false\n        }\n     \
      \ ],\n      \"title\": \"Token cost\",\n      \"type\": \"timeseries\"\n   \
      \ }\n  ],\n  \"refresh\": \"5s\",\n  \"schemaVersion\": 39,\n  \"tags\": [],\n\
      \  \"templating\": {\n    \"list\": []\n  },\n  \"time\": {\n    \"from\": \"\
      now-15m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {},\n  \"timezone\"\
      : \"\",\n  \"title\": \"Overview\",\n  \"uid\": \"b5c8abf8-fe79-496b-b028-10bde917d1f0\"\
      ,\n  \"version\": 1,\n  \"weekStart\": \"\"\n}\n"
  kind: ConfigMap
  metadata:
    name: dashboards
    namespace: trustgraph
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: grafana
    name: grafana
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: grafana
    template:
      metadata:
        labels:
          app: grafana
      spec:
        containers:
        - env:
          - name: GF_ORG_NAME
            value: trustgraph.ai
          image: docker.io/grafana/grafana:12.0.2
          name: grafana
          ports:
          - containerPort: 3000
            hostPort: 3000
          resources:
            limits:
              cpu: '1.0'
              memory: 256M
            requests:
              cpu: '0.5'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/dashboards/
            name: prov-dash
          - mountPath: /etc/grafana/provisioning/datasources/
            name: prov-data
          - mountPath: /var/lib/grafana/dashboards/
            name: dashboards
        volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - configMap:
            name: prov-dash
          name: prov-dash
        - configMap:
            name: prov-data
          name: prov-data
        - configMap:
            name: dashboards
          name: dashboards
- apiVersion: v1
  kind: Service
  metadata:
    name: grafana
    namespace: trustgraph
  spec:
    ports:
    - name: http
      port: 3000
      targetPort: 3000
    selector:
      app: grafana
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: graph-embeddings
    name: graph-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: graph-embeddings
    template:
      metadata:
        labels:
          app: graph-embeddings
      spec:
        containers:
        - command:
          - graph-embeddings
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: graph-embeddings
          resources:
            limits:
              cpu: '1.0'
              memory: 512M
            requests:
              cpu: '0.5'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: graph-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: graph-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: graph-rag
    name: graph-rag
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: graph-rag
    template:
      metadata:
        labels:
          app: graph-rag
      spec:
        containers:
        - command:
          - graph-rag
          - -p
          - pulsar://pulsar:6650
          - --entity-limit
          - '50'
          - --triple-limit
          - '30'
          - --max-subgraph-size
          - '400'
          - --max-path-length
          - '2'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: graph-rag
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: graph-rag
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: graph-rag
- apiVersion: v1
  data:
    config.json: '{"flow-classes": {"document-rag": {"class": {"de-query:{class}":
      {"request": "non-persistent://tg/request/document-embeddings:{class}", "response":
      "non-persistent://tg/response/document-embeddings:{class}"}, "document-rag:{class}":
      {"document-embeddings-request": "non-persistent://tg/request/document-embeddings:{class}",
      "document-embeddings-response": "non-persistent://tg/response/document-embeddings:{class}",
      "embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/document-rag:{class}", "response": "non-persistent://tg/response/document-rag:{class}"},
      "embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "mcp-tool:{class}":
      {"request": "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "prompt-rag:{class}": {"request": "non-persistent://tg/request/prompt-rag:{class}",
      "response": "non-persistent://tg/response/prompt-rag:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion-rag:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion-rag:{class}"}, "prompt:{class}":
      {"request": "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}}, "description": "DocumentRAG
      only", "flow": {"chunker:{id}": {"input": "persistent://tg/flow/text-document-load:{id}",
      "output": "persistent://tg/flow/chunk-load:{id}"}, "de-write:{id}": {"input":
      "persistent://tg/flow/document-embeddings-store:{id}"}, "document-embeddings:{id}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "input": "persistent://tg/flow/chunk-load:{id}",
      "output": "persistent://tg/flow/document-embeddings-store:{id}"}, "pdf-decoder:{id}":
      {"input": "persistent://tg/flow/document-load:{id}", "output": "persistent://tg/flow/text-document-load:{id}"}},
      "interfaces": {"document-embeddings": {"request": "non-persistent://tg/request/document-embeddings:{class}",
      "response": "non-persistent://tg/response/document-embeddings:{class}"}, "document-embeddings-store":
      "persistent://tg/flow/document-embeddings-store:{id}", "document-load": "persistent://tg/flow/document-load:{id}",
      "document-rag": {"request": "non-persistent://tg/request/document-rag:{class}",
      "response": "non-persistent://tg/response/document-rag:{class}"}, "embeddings":
      {"request": "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}", "response":
      "non-persistent://tg/response/mcp-tool:{class}"}, "prompt": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}"},
      "tags": ["document-rag"]}, "document-rag+graph-rag": {"class": {"de-query:{class}":
      {"request": "non-persistent://tg/request/document-embeddings:{class}", "response":
      "non-persistent://tg/response/document-embeddings:{class}"}, "document-rag:{class}":
      {"document-embeddings-request": "non-persistent://tg/request/document-embeddings:{class}",
      "document-embeddings-response": "non-persistent://tg/response/document-embeddings:{class}",
      "embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/document-rag:{class}", "response": "non-persistent://tg/response/document-rag:{class}"},
      "embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "ge-query:{class}":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-rag:{class}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "graph-embeddings-request":
      "non-persistent://tg/request/graph-embeddings:{class}", "graph-embeddings-response":
      "non-persistent://tg/response/graph-embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}",
      "triples-request": "non-persistent://tg/request/triples:{class}", "triples-response":
      "non-persistent://tg/response/triples:{class}"}, "mcp-tool:{class}": {"request":
      "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "prompt-rag:{class}": {"request": "non-persistent://tg/request/prompt-rag:{class}",
      "response": "non-persistent://tg/response/prompt-rag:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion-rag:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion-rag:{class}"}, "prompt:{class}":
      {"request": "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "triples-query:{class}":
      {"request": "non-persistent://tg/request/triples:{class}", "response": "non-persistent://tg/response/triples:{class}"}},
      "description": "Supports GraphRAG and document RAG, no core creation", "flow":
      {"agent-manager:{id}": {"graph-rag-request": "non-persistent://tg/request/graph-rag:{class}",
      "graph-rag-response": "non-persistent://tg/response/graph-rag:{class}", "mcp-tool-request":
      "non-persistent://tg/request/mcp-tool:{class}", "mcp-tool-response": "non-persistent://tg/response/mcp-tool:{class}",
      "next": "non-persistent://tg/request/agent:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "request":
      "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}",
      "structured-query-request": "non-persistent://tg/request/structured-query:{class}",
      "structured-query-response": "non-persistent://tg/response/structured-query:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "chunker:{id}": {"input": "persistent://tg/flow/text-document-load:{id}", "output":
      "persistent://tg/flow/chunk-load:{id}"}, "de-write:{id}": {"input": "persistent://tg/flow/document-embeddings-store:{id}"},
      "document-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/chunk-load:{id}", "output": "persistent://tg/flow/document-embeddings-store:{id}"},
      "ge-write:{id}": {"input": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "graph-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/entity-contexts-load:{id}", "output": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "kg-extract-definitions:{id}": {"entity-contexts": "persistent://tg/flow/entity-contexts-load:{id}",
      "input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "kg-extract-relationships:{id}":
      {"input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "pdf-decoder:{id}": {"input": "persistent://tg/flow/document-load:{id}",
      "output": "persistent://tg/flow/text-document-load:{id}"}, "triples-write:{id}":
      {"input": "persistent://tg/flow/triples-store:{id}"}}, "interfaces": {"agent":
      {"request": "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}"},
      "document-embeddings": {"request": "non-persistent://tg/request/document-embeddings:{class}",
      "response": "non-persistent://tg/response/document-embeddings:{class}"}, "document-embeddings-store":
      "persistent://tg/flow/document-embeddings-store:{id}", "document-load": "persistent://tg/flow/document-load:{id}",
      "document-rag": {"request": "non-persistent://tg/request/document-rag:{class}",
      "response": "non-persistent://tg/response/document-rag:{class}"}, "embeddings":
      {"request": "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "entity-contexts-load": "persistent://tg/flow/entity-contexts-load:{id}", "graph-embeddings":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-embeddings-store":
      "persistent://tg/flow/graph-embeddings-store:{id}", "graph-rag": {"request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}", "response":
      "non-persistent://tg/response/mcp-tool:{class}"}, "prompt": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}",
      "triples": {"request": "non-persistent://tg/request/triples:{class}", "response":
      "non-persistent://tg/response/triples:{class}"}, "triples-store": "persistent://tg/flow/triples-store:{id}"},
      "tags": ["document-rag", "graph-rag", "knowledge-extraction"]}, "document-rag+graph-rag+kgcore":
      {"class": {"de-query:{class}": {"request": "non-persistent://tg/request/document-embeddings:{class}",
      "response": "non-persistent://tg/response/document-embeddings:{class}"}, "document-rag:{class}":
      {"document-embeddings-request": "non-persistent://tg/request/document-embeddings:{class}",
      "document-embeddings-response": "non-persistent://tg/response/document-embeddings:{class}",
      "embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/document-rag:{class}", "response": "non-persistent://tg/response/document-rag:{class}"},
      "embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "ge-query:{class}":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-rag:{class}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "graph-embeddings-request":
      "non-persistent://tg/request/graph-embeddings:{class}", "graph-embeddings-response":
      "non-persistent://tg/response/graph-embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}",
      "triples-request": "non-persistent://tg/request/triples:{class}", "triples-response":
      "non-persistent://tg/response/triples:{class}"}, "mcp-tool:{class}": {"request":
      "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "prompt-rag:{class}": {"request": "non-persistent://tg/request/prompt-rag:{class}",
      "response": "non-persistent://tg/response/prompt-rag:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion-rag:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion-rag:{class}"}, "prompt:{class}":
      {"request": "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "triples-query:{class}":
      {"request": "non-persistent://tg/request/triples:{class}", "response": "non-persistent://tg/response/triples:{class}"}},
      "description": "GraphRAG + DocumentRAG + knowledge core creation", "flow": {"agent-manager:{id}":
      {"graph-rag-request": "non-persistent://tg/request/graph-rag:{class}", "graph-rag-response":
      "non-persistent://tg/response/graph-rag:{class}", "mcp-tool-request": "non-persistent://tg/request/mcp-tool:{class}",
      "mcp-tool-response": "non-persistent://tg/response/mcp-tool:{class}", "next":
      "non-persistent://tg/request/agent:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "request":
      "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}",
      "structured-query-request": "non-persistent://tg/request/structured-query:{class}",
      "structured-query-response": "non-persistent://tg/response/structured-query:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "chunker:{id}": {"input": "persistent://tg/flow/text-document-load:{id}", "output":
      "persistent://tg/flow/chunk-load:{id}"}, "de-write:{id}": {"input": "persistent://tg/flow/document-embeddings-store:{id}"},
      "document-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/chunk-load:{id}", "output": "persistent://tg/flow/document-embeddings-store:{id}"},
      "ge-write:{id}": {"input": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "graph-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/entity-contexts-load:{id}", "output": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "kg-extract-definitions:{id}": {"entity-contexts": "persistent://tg/flow/entity-contexts-load:{id}",
      "input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "kg-extract-relationships:{id}":
      {"input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "kg-store:{id}": {"graph-embeddings-input":
      "persistent://tg/flow/graph-embeddings-store:{id}", "triples-input": "persistent://tg/flow/triples-store:{id}"},
      "pdf-decoder:{id}": {"input": "persistent://tg/flow/document-load:{id}", "output":
      "persistent://tg/flow/text-document-load:{id}"}, "triples-write:{id}": {"input":
      "persistent://tg/flow/triples-store:{id}"}}, "interfaces": {"agent": {"request":
      "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}"},
      "document-embeddings": {"request": "non-persistent://tg/request/document-embeddings:{class}",
      "response": "non-persistent://tg/response/document-embeddings:{class}"}, "document-embeddings-store":
      "persistent://tg/flow/document-embeddings-store:{id}", "document-load": "persistent://tg/flow/document-load:{id}",
      "document-rag": {"request": "non-persistent://tg/request/document-rag:{class}",
      "response": "non-persistent://tg/response/document-rag:{class}"}, "embeddings":
      {"request": "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "entity-contexts-load": "persistent://tg/flow/entity-contexts-load:{id}", "graph-embeddings":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-embeddings-store":
      "persistent://tg/flow/graph-embeddings-store:{id}", "graph-rag": {"request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}", "response":
      "non-persistent://tg/response/mcp-tool:{class}"}, "prompt": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}",
      "triples": {"request": "non-persistent://tg/request/triples:{class}", "response":
      "non-persistent://tg/response/triples:{class}"}, "triples-store": "persistent://tg/flow/triples-store:{id}"},
      "tags": ["document-rag", "graph-rag", "knowledge-extraction"]}, "graph-rag":
      {"class": {"embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "ge-query:{class}":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-rag:{class}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "graph-embeddings-request":
      "non-persistent://tg/request/graph-embeddings:{class}", "graph-embeddings-response":
      "non-persistent://tg/response/graph-embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}",
      "triples-request": "non-persistent://tg/request/triples:{class}", "triples-response":
      "non-persistent://tg/response/triples:{class}"}, "mcp-tool:{class}": {"request":
      "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "prompt-rag:{class}": {"request": "non-persistent://tg/request/prompt-rag:{class}",
      "response": "non-persistent://tg/response/prompt-rag:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion-rag:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion-rag:{class}"}, "prompt:{class}":
      {"request": "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "triples-query:{class}":
      {"request": "non-persistent://tg/request/triples:{class}", "response": "non-persistent://tg/response/triples:{class}"}},
      "description": "GraphRAG only", "flow": {"agent-manager:{id}": {"graph-rag-request":
      "non-persistent://tg/request/graph-rag:{class}", "graph-rag-response": "non-persistent://tg/response/graph-rag:{class}",
      "mcp-tool-request": "non-persistent://tg/request/mcp-tool:{class}", "mcp-tool-response":
      "non-persistent://tg/response/mcp-tool:{class}", "next": "non-persistent://tg/request/agent:{id}",
      "prompt-request": "non-persistent://tg/request/prompt:{class}", "prompt-response":
      "non-persistent://tg/response/prompt:{class}", "request": "non-persistent://tg/request/agent:{id}",
      "response": "non-persistent://tg/response/agent:{id}", "structured-query-request":
      "non-persistent://tg/request/structured-query:{class}", "structured-query-response":
      "non-persistent://tg/response/structured-query:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion:{class}"}, "chunker:{id}": {"input":
      "persistent://tg/flow/text-document-load:{id}", "output": "persistent://tg/flow/chunk-load:{id}"},
      "ge-write:{id}": {"input": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "graph-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/entity-contexts-load:{id}", "output": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "kg-extract-definitions:{id}": {"entity-contexts": "persistent://tg/flow/entity-contexts-load:{id}",
      "input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "kg-extract-relationships:{id}":
      {"input": "persistent://tg/flow/chunk-load:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "triples":
      "persistent://tg/flow/triples-store:{id}"}, "pdf-decoder:{id}": {"input": "persistent://tg/flow/document-load:{id}",
      "output": "persistent://tg/flow/text-document-load:{id}"}, "triples-write:{id}":
      {"input": "persistent://tg/flow/triples-store:{id}"}}, "interfaces": {"agent":
      {"request": "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}"},
      "document-load": "persistent://tg/flow/document-load:{id}", "embeddings": {"request":
      "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "entity-contexts-load": "persistent://tg/flow/entity-contexts-load:{id}", "graph-embeddings":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-embeddings-store":
      "persistent://tg/flow/graph-embeddings-store:{id}", "graph-rag": {"request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}", "response":
      "non-persistent://tg/response/mcp-tool:{class}"}, "prompt": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}",
      "triples": {"request": "non-persistent://tg/request/triples:{class}", "response":
      "non-persistent://tg/response/triples:{class}"}, "triples-store": "persistent://tg/flow/triples-store:{id}"},
      "tags": ["graph-rag", "knowledge-extraction"]}, "graph-rag+agent-extract": {"class":
      {"embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "ge-query:{class}":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-rag:{class}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "graph-embeddings-request":
      "non-persistent://tg/request/graph-embeddings:{class}", "graph-embeddings-response":
      "non-persistent://tg/response/graph-embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}",
      "triples-request": "non-persistent://tg/request/triples:{class}", "triples-response":
      "non-persistent://tg/response/triples:{class}"}, "mcp-tool:{class}": {"request":
      "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "prompt-rag:{class}": {"request": "non-persistent://tg/request/prompt-rag:{class}",
      "response": "non-persistent://tg/response/prompt-rag:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion-rag:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion-rag:{class}"}, "prompt:{class}":
      {"request": "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "triples-query:{class}":
      {"request": "non-persistent://tg/request/triples:{class}", "response": "non-persistent://tg/response/triples:{class}"}},
      "description": "GraphRAG + agent extract", "flow": {"agent-manager:{id}": {"graph-rag-request":
      "non-persistent://tg/request/graph-rag:{class}", "graph-rag-response": "non-persistent://tg/response/graph-rag:{class}",
      "mcp-tool-request": "non-persistent://tg/request/mcp-tool:{class}", "mcp-tool-response":
      "non-persistent://tg/response/mcp-tool:{class}", "next": "non-persistent://tg/request/agent:{id}",
      "prompt-request": "non-persistent://tg/request/prompt:{class}", "prompt-response":
      "non-persistent://tg/response/prompt:{class}", "request": "non-persistent://tg/request/agent:{id}",
      "response": "non-persistent://tg/response/agent:{id}", "structured-query-request":
      "non-persistent://tg/request/structured-query:{class}", "structured-query-response":
      "non-persistent://tg/response/structured-query:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion:{class}"}, "chunker:{id}": {"input":
      "persistent://tg/flow/text-document-load:{id}", "output": "persistent://tg/flow/chunk-load:{id}"},
      "ge-write:{id}": {"input": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "graph-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/entity-contexts-load:{id}", "output": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "kg-extract-agent:{id}": {"agent-request": "non-persistent://tg/request/agent:{id}",
      "agent-response": "non-persistent://tg/response/agent:{id}", "entity-contexts":
      "persistent://tg/flow/entity-contexts-load:{id}", "input": "persistent://tg/flow/chunk-load:{id}",
      "triples": "persistent://tg/flow/triples-store:{id}"}, "pdf-decoder:{id}": {"input":
      "persistent://tg/flow/document-load:{id}", "output": "persistent://tg/flow/text-document-load:{id}"},
      "triples-write:{id}": {"input": "persistent://tg/flow/triples-store:{id}"}},
      "interfaces": {"agent": {"request": "non-persistent://tg/request/agent:{id}",
      "response": "non-persistent://tg/response/agent:{id}"}, "document-load": "persistent://tg/flow/document-load:{id}",
      "embeddings": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "entity-contexts-load":
      "persistent://tg/flow/entity-contexts-load:{id}", "graph-embeddings": {"request":
      "non-persistent://tg/request/graph-embeddings:{class}", "response": "non-persistent://tg/response/graph-embeddings:{class}"},
      "graph-embeddings-store": "persistent://tg/flow/graph-embeddings-store:{id}",
      "graph-rag": {"request": "non-persistent://tg/request/graph-rag:{class}", "response":
      "non-persistent://tg/response/graph-rag:{class}"}, "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}",
      "response": "non-persistent://tg/response/mcp-tool:{class}"}, "prompt": {"request":
      "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}"},
      "text-completion": {"request": "non-persistent://tg/request/text-completion:{class}",
      "response": "non-persistent://tg/response/text-completion:{class}"}, "text-load":
      "persistent://tg/flow/text-document-load:{id}", "triples": {"request": "non-persistent://tg/request/triples:{class}",
      "response": "non-persistent://tg/response/triples:{class}"}, "triples-store":
      "persistent://tg/flow/triples-store:{id}"}, "tags": ["graph-rag", "knowledge-extraction",
      "agent-extract"]}, "graph-rag+object-extract": {"class": {"embeddings:{class}":
      {"request": "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "ge-query:{class}": {"request": "non-persistent://tg/request/graph-embeddings:{class}",
      "response": "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-rag:{class}":
      {"embeddings-request": "non-persistent://tg/request/embeddings:{class}", "embeddings-response":
      "non-persistent://tg/response/embeddings:{class}", "graph-embeddings-request":
      "non-persistent://tg/request/graph-embeddings:{class}", "graph-embeddings-response":
      "non-persistent://tg/response/graph-embeddings:{class}", "prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}",
      "triples-request": "non-persistent://tg/request/triples:{class}", "triples-response":
      "non-persistent://tg/response/triples:{class}"}, "mcp-tool:{class}": {"request":
      "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "nlp-query:{class}": {"prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/nlp-query:{class}", "response": "non-persistent://tg/response/nlp-query:{class}"},
      "objects-query:{class}": {"request": "non-persistent://tg/request/objects:{class}",
      "response": "non-persistent://tg/response/objects:{class}"}, "prompt-rag:{class}":
      {"request": "non-persistent://tg/request/prompt-rag:{class}", "response": "non-persistent://tg/response/prompt-rag:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion-rag:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion-rag:{class}"},
      "prompt:{class}": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion:{class}"}, "structured-query:{class}":
      {"nlp-query-request": "non-persistent://tg/request/nlp-query:{class}", "nlp-query-response":
      "non-persistent://tg/response/nlp-query:{class}", "objects-query-request": "non-persistent://tg/request/objects:{class}",
      "objects-query-response": "non-persistent://tg/response/objects:{class}", "request":
      "non-persistent://tg/request/structured-query:{class}", "response": "non-persistent://tg/response/structured-query:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "triples-query:{class}":
      {"request": "non-persistent://tg/request/triples:{class}", "response": "non-persistent://tg/response/triples:{class}"}},
      "description": "GraphRAG + object extract", "flow": {"agent-manager:{id}": {"graph-rag-request":
      "non-persistent://tg/request/graph-rag:{class}", "graph-rag-response": "non-persistent://tg/response/graph-rag:{class}",
      "mcp-tool-request": "non-persistent://tg/request/mcp-tool:{class}", "mcp-tool-response":
      "non-persistent://tg/response/mcp-tool:{class}", "next": "non-persistent://tg/request/agent:{id}",
      "prompt-request": "non-persistent://tg/request/prompt:{class}", "prompt-response":
      "non-persistent://tg/response/prompt:{class}", "request": "non-persistent://tg/request/agent:{id}",
      "response": "non-persistent://tg/response/agent:{id}", "structured-query-request":
      "non-persistent://tg/request/structured-query:{class}", "structured-query-response":
      "non-persistent://tg/response/structured-query:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion:{class}"}, "chunker:{id}": {"input":
      "persistent://tg/flow/text-document-load:{id}", "output": "persistent://tg/flow/chunk-load:{id}"},
      "ge-write:{id}": {"input": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "graph-embeddings:{id}": {"embeddings-request": "non-persistent://tg/request/embeddings:{class}",
      "embeddings-response": "non-persistent://tg/response/embeddings:{class}", "input":
      "persistent://tg/flow/entity-contexts-load:{id}", "output": "persistent://tg/flow/graph-embeddings-store:{id}"},
      "kg-extract-objects:{id}": {"entity-contexts": "persistent://tg/flow/entity-contexts-load:{id}",
      "input": "persistent://tg/flow/chunk-load:{id}", "output": "persistent://tg/flow/objects-store:{id}",
      "prompt-request": "non-persistent://tg/request/prompt:{class}", "prompt-response":
      "non-persistent://tg/response/prompt:{class}"}, "objects-write:{id}": {"input":
      "persistent://tg/flow/objects-store:{id}"}, "pdf-decoder:{id}": {"input": "persistent://tg/flow/document-load:{id}",
      "output": "persistent://tg/flow/text-document-load:{id}"}, "triples-write:{id}":
      {"input": "persistent://tg/flow/triples-store:{id}"}}, "interfaces": {"agent":
      {"request": "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}"},
      "document-load": "persistent://tg/flow/document-load:{id}", "embeddings": {"request":
      "non-persistent://tg/request/embeddings:{class}", "response": "non-persistent://tg/response/embeddings:{class}"},
      "entity-contexts-load": "persistent://tg/flow/entity-contexts-load:{id}", "graph-embeddings":
      {"request": "non-persistent://tg/request/graph-embeddings:{class}", "response":
      "non-persistent://tg/response/graph-embeddings:{class}"}, "graph-embeddings-store":
      "persistent://tg/flow/graph-embeddings-store:{id}", "graph-rag": {"request":
      "non-persistent://tg/request/graph-rag:{class}", "response": "non-persistent://tg/response/graph-rag:{class}"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:{class}", "response":
      "non-persistent://tg/response/mcp-tool:{class}"}, "nlp-query": {"request": "non-persistent://tg/request/nlp-query:{class}",
      "response": "non-persistent://tg/response/nlp-query:{class}"}, "objects": {"request":
      "non-persistent://tg/request/objects:{class}", "response": "non-persistent://tg/response/objects:{class}"},
      "objects-store": "persistent://tg/flow/objects-store:{id}", "prompt": {"request":
      "non-persistent://tg/request/prompt:{class}", "response": "non-persistent://tg/response/prompt:{class}"},
      "structured-query": {"request": "non-persistent://tg/request/structured-query:{class}",
      "response": "non-persistent://tg/response/structured-query:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}",
      "triples": {"request": "non-persistent://tg/request/triples:{class}", "response":
      "non-persistent://tg/response/triples:{class}"}, "triples-store": "persistent://tg/flow/triples-store:{id}"},
      "tags": ["graph-rag", "knowledge-extraction", "object-extract"]}, "object-extraction":
      {"class": {"embeddings:{class}": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "mcp-tool:{class}":
      {"request": "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "metering-rag:{class}": {"input": "non-persistent://tg/response/text-completion-rag:{class}"},
      "metering:{class}": {"input": "non-persistent://tg/response/text-completion:{class}"},
      "nlp-query:{class}": {"prompt-request": "non-persistent://tg/request/prompt-rag:{class}",
      "prompt-response": "non-persistent://tg/response/prompt-rag:{class}", "request":
      "non-persistent://tg/request/nlp-query:{class}", "response": "non-persistent://tg/response/nlp-query:{class}"},
      "objects-query:{class}": {"request": "non-persistent://tg/request/objects:{class}",
      "response": "non-persistent://tg/response/objects:{class}"}, "prompt-rag:{class}":
      {"request": "non-persistent://tg/request/prompt-rag:{class}", "response": "non-persistent://tg/response/prompt-rag:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion-rag:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion-rag:{class}"},
      "prompt:{class}": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}", "text-completion-request":
      "non-persistent://tg/request/text-completion:{class}", "text-completion-response":
      "non-persistent://tg/response/text-completion:{class}"}, "structured-query:{class}":
      {"nlp-query-request": "non-persistent://tg/request/nlp-query:{class}", "nlp-query-response":
      "non-persistent://tg/response/nlp-query:{class}", "objects-query-request": "non-persistent://tg/request/objects:{class}",
      "objects-query-response": "non-persistent://tg/response/objects:{class}", "request":
      "non-persistent://tg/request/structured-query:{class}", "response": "non-persistent://tg/response/structured-query:{class}"},
      "text-completion-rag:{class}": {"request": "non-persistent://tg/request/text-completion-rag:{class}",
      "response": "non-persistent://tg/response/text-completion-rag:{class}"}, "text-completion:{class}":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}}, "description": "Object
      extraction only", "flow": {"agent-manager:{id}": {"graph-rag-request": "non-persistent://tg/request/graph-rag:{class}",
      "graph-rag-response": "non-persistent://tg/response/graph-rag:{class}", "mcp-tool-request":
      "non-persistent://tg/request/mcp-tool:{class}", "mcp-tool-response": "non-persistent://tg/response/mcp-tool:{class}",
      "next": "non-persistent://tg/request/agent:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}", "request":
      "non-persistent://tg/request/agent:{id}", "response": "non-persistent://tg/response/agent:{id}",
      "structured-query-request": "non-persistent://tg/request/structured-query:{class}",
      "structured-query-response": "non-persistent://tg/response/structured-query:{class}",
      "text-completion-request": "non-persistent://tg/request/text-completion:{class}",
      "text-completion-response": "non-persistent://tg/response/text-completion:{class}"},
      "chunker:{id}": {"input": "persistent://tg/flow/text-document-load:{id}", "output":
      "persistent://tg/flow/chunk-load:{id}"}, "kg-extract-objects:{id}": {"entity-contexts":
      "persistent://tg/flow/entity-contexts-load:{id}", "input": "persistent://tg/flow/chunk-load:{id}",
      "output": "persistent://tg/flow/objects-store:{id}", "prompt-request": "non-persistent://tg/request/prompt:{class}",
      "prompt-response": "non-persistent://tg/response/prompt:{class}"}, "objects-write:{id}":
      {"input": "persistent://tg/flow/objects-store:{id}"}, "pdf-decoder:{id}": {"input":
      "persistent://tg/flow/document-load:{id}", "output": "persistent://tg/flow/text-document-load:{id}"}},
      "interfaces": {"agent": {"request": "non-persistent://tg/request/agent:{id}",
      "response": "non-persistent://tg/response/agent:{id}"}, "document-load": "persistent://tg/flow/document-load:{id}",
      "embeddings": {"request": "non-persistent://tg/request/embeddings:{class}",
      "response": "non-persistent://tg/response/embeddings:{class}"}, "mcp-tool":
      {"request": "non-persistent://tg/request/mcp-tool:{class}", "response": "non-persistent://tg/response/mcp-tool:{class}"},
      "nlp-query": {"request": "non-persistent://tg/request/nlp-query:{class}", "response":
      "non-persistent://tg/response/nlp-query:{class}"}, "objects": {"request": "non-persistent://tg/request/objects:{class}",
      "response": "non-persistent://tg/response/objects:{class}"}, "objects-store":
      "persistent://tg/flow/objects-store:{id}", "prompt": {"request": "non-persistent://tg/request/prompt:{class}",
      "response": "non-persistent://tg/response/prompt:{class}"}, "structured-query":
      {"request": "non-persistent://tg/request/structured-query:{class}", "response":
      "non-persistent://tg/response/structured-query:{class}"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:{class}", "response":
      "non-persistent://tg/response/text-completion:{class}"}, "text-load": "persistent://tg/flow/text-document-load:{id}"},
      "tags": ["knowledge-extraction", "object-extraction"]}}, "flows": {"default":
      {"class-name": "document-rag+graph-rag", "description": "Default processing
      flow", "interfaces": {"agent": {"request": "non-persistent://tg/request/agent:default",
      "response": "non-persistent://tg/response/agent:default"}, "document-embeddings":
      {"request": "non-persistent://tg/request/document-embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/document-embeddings:document-rag+graph-rag"},
      "document-embeddings-store": "persistent://tg/flow/document-embeddings-store:default",
      "document-load": "persistent://tg/flow/document-load:default", "document-rag":
      {"request": "non-persistent://tg/request/document-rag:document-rag+graph-rag",
      "response": "non-persistent://tg/response/document-rag:document-rag+graph-rag"},
      "embeddings": {"request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/embeddings:document-rag+graph-rag"},
      "entity-contexts-load": "persistent://tg/flow/entity-contexts-load:default",
      "graph-embeddings": {"request": "non-persistent://tg/request/graph-embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/graph-embeddings:document-rag+graph-rag"},
      "graph-embeddings-store": "persistent://tg/flow/graph-embeddings-store:default",
      "graph-rag": {"request": "non-persistent://tg/request/graph-rag:document-rag+graph-rag",
      "response": "non-persistent://tg/response/graph-rag:document-rag+graph-rag"},
      "mcp-tool": {"request": "non-persistent://tg/request/mcp-tool:document-rag+graph-rag",
      "response": "non-persistent://tg/response/mcp-tool:document-rag+graph-rag"},
      "prompt": {"request": "non-persistent://tg/request/prompt:document-rag+graph-rag",
      "response": "non-persistent://tg/response/prompt:document-rag+graph-rag"}, "text-completion":
      {"request": "non-persistent://tg/request/text-completion:document-rag+graph-rag",
      "response": "non-persistent://tg/response/text-completion:document-rag+graph-rag"},
      "text-load": "persistent://tg/flow/text-document-load:default", "triples": {"request":
      "non-persistent://tg/request/triples:document-rag+graph-rag", "response": "non-persistent://tg/response/triples:document-rag+graph-rag"},
      "triples-store": "persistent://tg/flow/triples-store:default"}}}, "flows-active":
      {"agent-manager": {"default": {"graph-rag-request": "non-persistent://tg/request/graph-rag:document-rag+graph-rag",
      "graph-rag-response": "non-persistent://tg/response/graph-rag:document-rag+graph-rag",
      "mcp-tool-request": "non-persistent://tg/request/mcp-tool:document-rag+graph-rag",
      "mcp-tool-response": "non-persistent://tg/response/mcp-tool:document-rag+graph-rag",
      "next": "non-persistent://tg/request/agent:default", "prompt-request": "non-persistent://tg/request/prompt:document-rag+graph-rag",
      "prompt-response": "non-persistent://tg/response/prompt:document-rag+graph-rag",
      "request": "non-persistent://tg/request/agent:default", "response": "non-persistent://tg/response/agent:default",
      "structured-query-request": "non-persistent://tg/request/structured-query:document-rag+graph-rag",
      "structured-query-response": "non-persistent://tg/response/structured-query:document-rag+graph-rag",
      "text-completion-request": "non-persistent://tg/request/text-completion:document-rag+graph-rag",
      "text-completion-response": "non-persistent://tg/response/text-completion:document-rag+graph-rag"}},
      "chunker": {"default": {"input": "persistent://tg/flow/text-document-load:default",
      "output": "persistent://tg/flow/chunk-load:default"}}, "de-query": {"document-rag+graph-rag":
      {"request": "non-persistent://tg/request/document-embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/document-embeddings:document-rag+graph-rag"}},
      "de-write": {"default": {"input": "persistent://tg/flow/document-embeddings-store:default"}},
      "document-embeddings": {"default": {"embeddings-request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "embeddings-response": "non-persistent://tg/response/embeddings:document-rag+graph-rag",
      "input": "persistent://tg/flow/chunk-load:default", "output": "persistent://tg/flow/document-embeddings-store:default"}},
      "document-rag": {"document-rag+graph-rag": {"document-embeddings-request": "non-persistent://tg/request/document-embeddings:document-rag+graph-rag",
      "document-embeddings-response": "non-persistent://tg/response/document-embeddings:document-rag+graph-rag",
      "embeddings-request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "embeddings-response": "non-persistent://tg/response/embeddings:document-rag+graph-rag",
      "prompt-request": "non-persistent://tg/request/prompt-rag:document-rag+graph-rag",
      "prompt-response": "non-persistent://tg/response/prompt-rag:document-rag+graph-rag",
      "request": "non-persistent://tg/request/document-rag:document-rag+graph-rag",
      "response": "non-persistent://tg/response/document-rag:document-rag+graph-rag"}},
      "embeddings": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/embeddings:document-rag+graph-rag"}},
      "ge-query": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/graph-embeddings:document-rag+graph-rag",
      "response": "non-persistent://tg/response/graph-embeddings:document-rag+graph-rag"}},
      "ge-write": {"default": {"input": "persistent://tg/flow/graph-embeddings-store:default"}},
      "graph-embeddings": {"default": {"embeddings-request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "embeddings-response": "non-persistent://tg/response/embeddings:document-rag+graph-rag",
      "input": "persistent://tg/flow/entity-contexts-load:default", "output": "persistent://tg/flow/graph-embeddings-store:default"}},
      "graph-rag": {"document-rag+graph-rag": {"embeddings-request": "non-persistent://tg/request/embeddings:document-rag+graph-rag",
      "embeddings-response": "non-persistent://tg/response/embeddings:document-rag+graph-rag",
      "graph-embeddings-request": "non-persistent://tg/request/graph-embeddings:document-rag+graph-rag",
      "graph-embeddings-response": "non-persistent://tg/response/graph-embeddings:document-rag+graph-rag",
      "prompt-request": "non-persistent://tg/request/prompt-rag:document-rag+graph-rag",
      "prompt-response": "non-persistent://tg/response/prompt-rag:document-rag+graph-rag",
      "request": "non-persistent://tg/request/graph-rag:document-rag+graph-rag", "response":
      "non-persistent://tg/response/graph-rag:document-rag+graph-rag", "triples-request":
      "non-persistent://tg/request/triples:document-rag+graph-rag", "triples-response":
      "non-persistent://tg/response/triples:document-rag+graph-rag"}}, "kg-extract-definitions":
      {"default": {"entity-contexts": "persistent://tg/flow/entity-contexts-load:default",
      "input": "persistent://tg/flow/chunk-load:default", "prompt-request": "non-persistent://tg/request/prompt:document-rag+graph-rag",
      "prompt-response": "non-persistent://tg/response/prompt:document-rag+graph-rag",
      "triples": "persistent://tg/flow/triples-store:default"}}, "kg-extract-relationships":
      {"default": {"input": "persistent://tg/flow/chunk-load:default", "prompt-request":
      "non-persistent://tg/request/prompt:document-rag+graph-rag", "prompt-response":
      "non-persistent://tg/response/prompt:document-rag+graph-rag", "triples": "persistent://tg/flow/triples-store:default"}},
      "mcp-tool": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/mcp-tool:document-rag+graph-rag",
      "response": "non-persistent://tg/response/mcp-tool:document-rag+graph-rag",
      "text-completion-request": "non-persistent://tg/request/text-completion:document-rag+graph-rag",
      "text-completion-response": "non-persistent://tg/response/text-completion:document-rag+graph-rag"}},
      "metering": {"document-rag+graph-rag": {"input": "non-persistent://tg/response/text-completion:document-rag+graph-rag"}},
      "metering-rag": {"document-rag+graph-rag": {"input": "non-persistent://tg/response/text-completion-rag:document-rag+graph-rag"}},
      "pdf-decoder": {"default": {"input": "persistent://tg/flow/document-load:default",
      "output": "persistent://tg/flow/text-document-load:default"}}, "prompt": {"document-rag+graph-rag":
      {"request": "non-persistent://tg/request/prompt:document-rag+graph-rag", "response":
      "non-persistent://tg/response/prompt:document-rag+graph-rag", "text-completion-request":
      "non-persistent://tg/request/text-completion:document-rag+graph-rag", "text-completion-response":
      "non-persistent://tg/response/text-completion:document-rag+graph-rag"}}, "prompt-rag":
      {"document-rag+graph-rag": {"request": "non-persistent://tg/request/prompt-rag:document-rag+graph-rag",
      "response": "non-persistent://tg/response/prompt-rag:document-rag+graph-rag",
      "text-completion-request": "non-persistent://tg/request/text-completion-rag:document-rag+graph-rag",
      "text-completion-response": "non-persistent://tg/response/text-completion-rag:document-rag+graph-rag"}},
      "text-completion": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/text-completion:document-rag+graph-rag",
      "response": "non-persistent://tg/response/text-completion:document-rag+graph-rag"}},
      "text-completion-rag": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/text-completion-rag:document-rag+graph-rag",
      "response": "non-persistent://tg/response/text-completion-rag:document-rag+graph-rag"}},
      "triples-query": {"document-rag+graph-rag": {"request": "non-persistent://tg/request/triples:document-rag+graph-rag",
      "response": "non-persistent://tg/response/triples:document-rag+graph-rag"}},
      "triples-write": {"default": {"input": "persistent://tg/flow/triples-store:default"}}},
      "interface-descriptions": {"agent": {"description": "Agent service", "kind":
      "request-response"}, "document-embeddings": {"description": "Document embeddings
      service", "kind": "request-response"}, "document-embeddings-store": {"description":
      "Document embeddings loader", "kind": "send"}, "document-load": {"description":
      "Document loader", "kind": "send", "visible": true}, "document-rag": {"description":
      "ChunkRAG service", "kind": "request-response"}, "entity-contexts-load": {"description":
      "Entity contexts loader", "kind": "send"}, "graph-embeddings": {"description":
      "Graph embeddings service", "kind": "request-response"}, "graph-embeddings-store":
      {"description": "Graph embeddings loader", "kind": "send"}, "graph-rag": {"description":
      "GraphRAG service", "kind": "request-response"}, "nlp-query": {"description":
      "NLP question to GraphQL service", "kind": "request-response"}, "objects": {"description":
      "Object query service", "kind": "request-response"}, "objects-store": {"description":
      "Object store", "kind": "request-response"}, "prompt": {"description": "Prompt
      service", "kind": "request-response"}, "structured-query": {"description": "Structured
      query service", "kind": "request-response"}, "text-completion": {"description":
      "Text completion service", "kind": "request-response"}, "text-load": {"description":
      "Text document loader", "kind": "send", "visible": true}, "triples": {"description":
      "Triples query service", "kind": "request-response"}, "triples-store": {"description":
      "Triples loader", "kind": "send"}}, "mcp": {"duckduckgo": {"remote-name": "search",
      "url": "http://ddg-mcp-server:9870/mcp"}}, "prompt": {"system": "You are a helpful
      assistant.", "template-index": ["agent-kg-extract", "agent-react", "diagnose-structured-data",
      "document-prompt", "extract-definitions", "extract-relationships", "extract-rows",
      "extract-topics", "graphql-generation", "kg-prompt", "question", "schema-selection"],
      "template.agent-kg-extract": {"prompt": "Analyze the following text and extract
      both entity definitions and relationships. Return the results as JSON with ''definitions''
      and ''relationships'' arrays.\n\nFor definitions, extract entities and their
      explanations or descriptions.\nFor relationships, extract subject-predicate-object
      triples where subjects and objects are entities, and predicates are relationship
      types.\n\nText: {{text}}\n\nReturn JSON only, no other text. Use this exact
      format:\n{\n  \"definitions\": [\n    {\n      \"entity\": \"entity_name\",\n      \"definition\":
      \"definition_text\"\n    }\n  ],\n  \"relationships\": [\n    {\n      \"subject\":
      \"subject_entity\",\n      \"predicate\": \"relationship_type\",\n      \"object\":
      \"object_entity_or_literal\",\n      \"object-entity\": true\n    }\n  ]\n}\n",
      "response-type": "json", "schema": {"properties": {"definitions": {"items":
      {"properties": {"definition": {"type": "string"}, "entity": {"type": "string"}},
      "required": ["entity", "definition"], "type": "object"}, "type": "array"}, "relationships":
      {"items": {"properties": {"object": {"type": "string"}, "object-entity": {"type":
      "boolean"}, "predicate": {"type": "string"}, "subject": {"type": "string"}},
      "required": ["subject", "predicate", "object"], "type": "object"}, "type": "array"}},
      "required": ["definitions", "relationships"], "type": "object"}}, "template.agent-react":
      {"prompt": "# ReAct Agent System Prompt\n\nYou are an AI assistant that uses
      the ReAct (Reasoning + Acting) framework to solve problems through systematic
      reasoning and tool use.\n\n## Core Instructions\n\nFor each user query, work
      through the problem step-by-step using this cycle:\n1. **Thought**: Reason about
      the current situation and determine what you need to do next\n2. **Action**:
      Take ONE specific action using an available tool\n3. Wait for **Observation**:
      The system will provide the result of your action\n4. Continue with the next
      **Thought** based on the observation\n\n**CRITICAL**: Generate exactly ONE Thought
      followed by ONE Action, then STOP. Do not generate multiple Thought/Action pairs
      in a single response. Do not generate Observations yourself - the system will
      provide them.\n\n## Response Format\n\nUse this exact format for each step:\n\n```\nThought:
      [Your reasoning about what to do next - be specific about why this action is
      needed]\nAction: [tool_name]\nArgs: {\n  \"parameter_name\": \"value\",\n  \"another_parameter\":
      123,\n  \"list_parameter\": [\"item1\", \"item2\"]\n}\n```\n\nWhen you have
      finished provide the final answer:\n\n```\nThought: [Your reasoning about why
      the process is complete]\nFinal Answer: [The final answer]\n```\n\nWhen providing
      a final answer, do not provide an Action or Args.\n\n## Action Format Rules\n\n1.
      **Tool Name**: Write \"Action: \" followed by the exact tool name on its own
      line\n2. **Arguments**: Write \"Args: \" followed by a valid JSON object containing
      all parameters\n3. **JSON Requirements**:\n   - Use double quotes for all string
      keys and values\n   - Numbers don''t need quotes: `\"count\": 5`\n   - Booleans:
      `\"enabled\": true` or `\"enabled\": false`\n   - Arrays: `\"items\": [\"a\",
      \"b\", \"c\"]`\n   - Nested objects: `\"config\": {\"setting\": \"value\"}`\n   -
      Null values: `\"optional_field\": null`\n4. **Required Parameters**: Include
      all required parameters for the tool\n5. **No Extra Text**: Don''t add explanations
      or comments within the Action block\n1. **Final answer**: Write \"Final Answer:
      \" followed by the final answer\n\n## Available Tools\n\n{% for tool in tools
      %}- **{{ tool.name }}**: {{ tool.description }}\n{% for arg in tool.arguments
      %}  - Required: `\"{{ arg.name }}\"` ({{ arg.type }}): {{ arg.description }}\n{%
      endfor %}\n{% endfor %}\n\n## Behavior Rules\n\n1. **One Step at a Time**: Generate
      exactly one Thought and one Action, then wait for the system to provide an Observation\n2.
      **Be Specific**: Your Thought should clearly explain why you''re taking the
      specific action\n3. **Use Context**: Build on previous Observations to inform
      your next steps\n4. **Error Handling**: If an action fails, reason about the
      error and try a different approach\n5. **Completion**: When you have enough
      information to fully answer the user''s query, generate a final Thought explaining
      your conclusion, but do not take further actions\n\n## Error Responses\n\nIf
      an action fails, you''ll see:\n```\nObservation: Error: [specific error message]\n```\n\nWhen
      this happens:\n- Generate a Thought analyzing what went wrong\n- Take a corrective
      Action with different parameters or a different tool\n- If a tool is completely
      unavailable, explain this limitation in your next Thought\n\n## Termination\n\nThe
      conversation ends when:\n- You determine you have sufficient information to
      answer the user''s query completely and provide a final answer.\n- You encounter
      an unrecoverable error that prevents task completion\n- The system reaches the
      maximum iteration limit\n\n## Important Notes\n\n- **Never generate Observations
      yourself** - only the system provides these\n- **Always validate your JSON**
      - malformed JSON will cause action failures  \n- **Stay focused** - each Thought
      should directly relate to solving the user''s query\n- **Be efficient** - choose
      actions that gather the most relevant information for the task\n\n# Proceed\n\nQuestion:
      {{question}}\n    \n{% for h in history %}\nAction: \"{{h.action}}\"\nArgs:
      {\n{% for k, v in h.arguments.items() %}  \"{{k}}\": \"{{v}}\"\n{% endfor %}}\nObservation:
      \"{{h.observation}}\"\n{% endfor %}\n", "response-type": "text"}, "template.diagnose-structured-data":
      {"prompt": "\nYou are an expert data engineer specializing in creating Structured
      Data Descriptor configurations for data import pipelines, with particular expertise
      in XML processing and XPath expressions. Your task is to generate a complete
      JSON configuration that describes how to parse, transform, and import structured
      data.\n\n## Your Role\nGenerate a comprehensive Structured Data Descriptor configuration
      based on the user''s requirements. The descriptor should be production-ready,
      include appropriate error handling, and follow best practices for data quality
      and transformation.\n\n## XML Processing Expertise\n\nWhen working with XML
      data, you must:\n\n1. **Analyze XML Structure** - Examine the hierarchy, namespaces,
      and element patterns\n2. **Generate Proper XPath Expressions** - Create efficient
      XPath selectors for record extraction\n3. **Handle Complex XML Patterns** -
      Support various XML formats including:\n   - Standard element structures: `<customer><name>John</name></customer>`\n   -
      Attribute-based fields: `<field name=\"country\">USA</field>`\n   - Mixed content
      and nested hierarchies\n   - Namespaced XML documents\n\n## XPath Expression
      Guidelines\n\nFor XML format configurations, use these XPath patterns:\n\n**Record
      Path Examples:**\n- Simple records: `//record` or `//customer`\n- Nested records:
      `//data/records/record` or `//customers/customer`\n- Absolute paths: `/ROOT/data/record`
      (will be converted to relative paths automatically)\n- With namespaces: `//ns:record`
      or `//soap:Body/data/record`\n\n**Field Attribute Patterns:**\n- When fields
      use name attributes: set `field_attribute: \"name\"` for `<field name=\"key\">value</field>`\n-
      For other attribute patterns: set appropriate attribute name\n\n**CRITICAL:
      Source Field Names in Mappings**\n\nWhen using `field_attribute`, the XML parser
      extracts field names from the attribute values and creates a flat dictionary.
      Your source field names in mappings must match these extracted names:\n\n**CORRECT
      Example:**\n```xml\n<field name=\"Country or Area\">Albania</field>\n<field
      name=\"Trade (USD)\">1000.50</field>\n```\n\nBecomes parsed data:\n```json\n{\n  \"Country
      or Area\": \"Albania\",\n  \"Trade (USD)\": \"1000.50\"\n}\n```\n\nSo your mappings
      should use:\n```json\n{\n  \"source_field\": \"Country or Area\",     // \u2705
      Correct - matches parsed field name\n  \"source_field\": \"Trade (USD)\"         //
      \u2705 Correct - matches parsed field name\n}\n```\n\n**INCORRECT Example:**\n```json\n{\n  \"source_field\":
      \"Field[@name=''Country or Area'']\",  // \u274c Wrong - XPath not needed here\n  \"source_field\":
      \"field[@name=''Trade (USD)'']\"       // \u274c Wrong - XPath not needed here\n}\n```\n\n**XML
      Format Configuration Template:**\n```json\n{\n  \"format\": {\n    \"type\":
      \"xml\",\n    \"encoding\": \"utf-8\",\n    \"options\": {\n      \"record_path\":
      \"//data/record\",        // XPath to find record elements\n      \"field_attribute\":
      \"name\"              // For <field name=\"key\">value</field> pattern\n    }\n  }\n}\n```\n\n**Alternative
      XML Options:**\n```json\n{\n  \"format\": {\n    \"type\": \"xml\", \n    \"encoding\":
      \"utf-8\",\n    \"options\": {\n      \"record_path\": \"//customer\",           //
      Direct element-based records\n      // No field_attribute needed for standard
      XML\n    }\n  }\n}\n```\n\n## Required Information to Gather\n\nBefore generating
      the descriptor, ask the user for these details if not provided:\n\n1. **Source
      Data Format**\n   - File type (CSV, JSON, XML, Excel, fixed-width, etc.)\n   -
      **For XML**: Sample structure, namespace prefixes, record element patterns\n   -
      Sample data or field descriptions\n   - Any format-specific details (delimiters,
      encoding, namespaces, etc.)\n\n2. **Target Schema**\n   - What fields should
      be in the final output?\n   - What data types are expected?\n   - Any required
      vs optional fields?\n\n3. **Data Transformations Needed**\n   - Field mappings
      (source field \u2192 target field)\n   - Data cleaning requirements (trim spaces,
      normalize case, etc.)\n   - Type conversions needed\n   - Any calculations or
      derived fields\n   - Lookup tables or reference data needed\n\n4. **Data Quality
      Requirements**\n   - Validation rules (format patterns, ranges, required fields)\n   -
      How to handle missing or invalid data\n   - Duplicate handling strategy\n\n5.
      **Processing Requirements**\n   - Any filtering needed (skip certain records)\n   -
      Sorting requirements\n   - Aggregation or grouping needs\n   - Error handling
      preferences\n\n## XML Structure Analysis\n\nWhen presented with XML data, analyze:\n\n1.
      **Document Root**: What is the root element?\n2. **Record Container**: Where
      are individual records located?\n3. **Field Pattern**: How are field names and
      values structured?\n   - Direct child elements: `<name>John</name>`\n   - Attribute-based:
      `<field name=\"name\">John</field>`\n   - Mixed patterns\n4. **Namespaces**:
      Are there any namespace prefixes?\n5. **Hierarchy Depth**: How deeply nested
      are the records?\n\n## Configuration Template Structure\n\nGenerate a JSON configuration
      following this structure:\n\n```json\n{\n  \"version\": \"1.0\",\n  \"metadata\":
      {\n    \"name\": \"[Descriptive name]\",\n    \"description\": \"[What this
      config does]\",\n    \"author\": \"[Author or team]\",\n    \"created\": \"[ISO
      date]\"\n  },\n  \"format\": {\n    \"type\": \"[csv|json|xml|fixed-width|excel]\",\n    \"encoding\":
      \"utf-8\",\n    \"options\": {\n      // Format-specific parsing options\n      //
      For XML: record_path (XPath), field_attribute (if applicable)\n    }\n  },\n  \"globals\":
      {\n    \"variables\": {\n      // Global variables and constants\n    },\n    \"lookup_tables\":
      {\n      // Reference data for transformations\n    }\n  },\n  \"preprocessing\":
      [\n    // Global filters and operations before field mapping\n  ],\n  \"mappings\":
      [\n    // Field mapping definitions with transforms and validation\n  ],\n  \"postprocessing\":
      [\n    // Global operations after field mapping\n  ],\n  \"output\": {\n    \"format\":
      \"trustgraph-objects\",\n    \"schema_name\": \"[target schema name]\",\n    \"options\":
      {\n      \"confidence\": 0.85,\n      \"batch_size\": 1000\n    },\n    \"error_handling\":
      {\n      \"on_validation_error\": \"log_and_skip\",\n      \"on_transform_error\":
      \"log_and_skip\",\n      \"max_errors\": 100\n    }\n  }\n}\n```\n\n## Transform
      Types Available\n\nUse these transform types in your mappings:\n\n**String Operations:**\n-
      `trim`, `upper`, `lower`, `title_case`\n- `replace`, `regex_replace`, `substring`,
      `pad_left`\n\n**Type Conversions:**\n- `to_string`, `to_int`, `to_float`, `to_bool`,
      `to_date`\n\n**Data Operations:**\n- `default`, `lookup`, `concat`, `calculate`,
      `conditional`\n\n**Validation Types:**\n- `required`, `not_null`, `min_length`,
      `max_length`\n- `range`, `pattern`, `in_list`, `custom`\n\n## XML-Specific Best
      Practices\n\n1. **Use efficient XPath expressions** - Prefer specific paths
      over broad searches\n2. **Handle namespace prefixes** when present\n3. **Identify
      field attribute patterns** correctly\n4. **Test XPath expressions** mentally
      against the provided structure\n5. **Consider XML element vs attribute data**
      in field mappings\n6. **Account for mixed content** and nested structures\n\n##
      Best Practices to Follow\n\n1. **Always include error handling** with appropriate
      policies\n2. **Use meaningful field names** that match target schema\n3. **Add
      validation** for critical fields\n4. **Include default values** for optional
      fields\n5. **Use lookup tables** for code translations\n6. **Add preprocessing
      filters** to exclude invalid records\n7. **Include metadata** for documentation
      and maintenance\n8. **Consider performance** with appropriate batch sizes\n\n##
      Complete XML Example\n\nGiven this XML structure:\n```xml\n<ROOT>\n  <data>\n    <record>\n      <field
      name=\"Country\">USA</field>\n      <field name=\"Year\">2024</field>\n      <field
      name=\"Amount\">1000.50</field>\n    </record>\n  </data>\n</ROOT>\n```\n\nThe
      parser will:\n1. Use `record_path: \"/ROOT/data/record\"` to find record elements\n2.
      Use `field_attribute: \"name\"` to extract field names from the name attribute\n3.
      Create this parsed data structure: `{\"Country\": \"USA\", \"Year\": \"2024\",
      \"Amount\": \"1000.50\"}`\n\nGenerate this COMPLETE configuration:\n```json\n{\n  \"format\":
      {\n    \"type\": \"xml\",\n    \"encoding\": \"utf-8\", \n    \"options\": {\n      \"record_path\":
      \"/ROOT/data/record\",\n      \"field_attribute\": \"name\"\n    }\n  },\n  \"mappings\":
      [\n    {\n      \"source_field\": \"Country\",          // \u2705 Matches parsed
      field name\n      \"target_field\": \"country_name\"\n    },\n    {\n      \"source_field\":
      \"Year\",             // \u2705 Matches parsed field name  \n      \"target_field\":
      \"year\",\n      \"transforms\": [{\"type\": \"to_int\"}]\n    },\n    {\n      \"source_field\":
      \"Amount\",           // \u2705 Matches parsed field name\n      \"target_field\":
      \"amount\",\n      \"transforms\": [{\"type\": \"to_float\"}]\n    }\n  ]\n}\n```\n\n**KEY
      RULE: source_field names must match the extracted field names, NOT the XML element
      structure.**\n\n## Output Format\n\nProvide the configuration as ONLY a properly
      formatted JSON document.\n\n## Schema\n\nThe following schema describes the
      target result format:\n\n{% for schema in schemas %}\n**{{ schema.name }}**:
      {{ schema.description }}\nFields:\n{% for field in schema.fields %}\n- {{ field.name
      }} ({{ field.type }}){% if field.description %}: {{ field.description }}{% endif\n%}{%
      if field.primary_key %} [PRIMARY KEY]{% endif %}{% if field.required %} [REQUIRED]{%
      endif \n%}{% if field.indexed %} [INDEXED]{% endif %}{% if field.enum_values
      %} [OPTIONS: {{\nfield.enum_values|join('', '') }}]{% endif %}\n{% endfor %}\n\n{%
      endfor %}\n\n## Data sample\n\nAnalyze the XML structure and produce a Structured
      Data Descriptor by diagnosing the following data sample. Pay special attention
      to XML hierarchy, element patterns, and generate appropriate XPath expressions:\n\n{{sample}}\n",
      "response-type": "json"}, "template.document-prompt": {"prompt": "Study the
      following context. Use only the information provided in the context in your
      response. Do not speculate if the answer is not found in the provided set of
      knowledge statements.\n\nHere is the context:\n{{documents}}\n\nUse only the
      provided knowledge statements to respond to the following:\n{{query}}\n", "response-type":
      "text"}, "template.extract-definitions": {"prompt": "<instructions>\nStudy the
      following text and derive definitions for any discovered entities.\nDo not provide
      definitions for entities whose definitions are incomplete\nor unknown.\nOutput
      relationships in JSON format as an arary of objects with fields:\n- entity:
      the name of the entity\n- definition: English text which defines the entity\n</instructions>\n\n<text>\n{{text}}\n</text>\n\n<requirements>\nYou
      will respond only with raw JSON format data. Do not provide\nexplanations. Do
      not use special characters in the abstract text. The\nabstract will be written
      as plain text.  Do not add markdown formatting\nor headers or prefixes.  Do
      not include null or unknown definitions.\n</requirements>", "response-type":
      "json", "schema": {"items": {"properties": {"definition": {"type": "string"},
      "entity": {"type": "string"}}, "required": ["entity", "definition"], "type":
      "object"}, "type": "array"}}, "template.extract-relationships": {"prompt": "<instructions>\nStudy
      the following text and derive entity relationships.  For each\nrelationship,
      derive the subject, predicate and object of the relationship.\nOutput relationships
      in JSON format as an arary of objects with fields:\n- subject: the subject of
      the relationship\n- predicate: the predicate\n- object: the object of the relationship\n-
      object-entity: false if the object is a simple data type: name, value or date.  true
      if it is an entity.\n</instructions>\n\n<text>\n{{text}}\n</text>\n\n<requirements>\nYou
      will respond only with raw JSON format data. Do not provide\nexplanations. Do
      not use special characters in the abstract text. The\nabstract must be written
      as plain text.  Do not add markdown formatting\nor headers or prefixes.\n</requirements>",
      "response-type": "json", "schema": {"items": {"properties": {"object": {"type":
      "string"}, "object-entity": {"type": "boolean"}, "predicate": {"type": "string"},
      "subject": {"type": "string"}}, "required": ["subject", "predicate", "object",
      "object-entity"], "type": "object"}, "type": "array"}}, "template.extract-rows":
      {"prompt": "<instructions>\nStudy the following text and derive objects which
      match the schema provided.\n\nYou must output an array of JSON objects for each
      object you discover\nwhich matches the schema.  For each object, output a JSON
      object whose fields\ncarry the name field specified in the schema.\n</instructions>\n\n<schema>\n{{schema}}\n</schema>\n\n<text>\n{{text}}\n</text>\n\n<requirements>\nYou
      will respond only with raw JSON format data. Do not provide\nexplanations. Do
      not add markdown formatting or headers or prefixes.\n</requirements>", "response-type":
      "json"}, "template.extract-topics": {"prompt": "You are a helpful assistant
      that performs information extraction tasks for a provided text.\nRead the provided
      text. You will identify topics and their definitions in JSON.\n\nReading Instructions:\n-
      Ignore document formatting in the provided text.\n- Study the provided text
      carefully.\n\nHere is the text:\n{{text}}\n\nResponse Instructions: \n- Do not
      respond with special characters.\n- Return only topics that are concepts and
      unique to the provided text.\n- Respond only with well-formed JSON.\n- The JSON
      response shall be an array of objects with keys \"topic\" and \"definition\".
      \n- The JSON response shall use the following structure:\n\n```json\n[{\"topic\":
      string, \"definition\": string}]\n```\n\n- Do not write any additional text
      or explanations.", "response-type": "json", "schema": {"items": {"properties":
      {"definition": {"type": "string"}, "topic": {"type": "string"}}, "required":
      ["topic", "definition"], "type": "object"}, "type": "array"}}, "template.graphql-generation":
      {"prompt": "You are a GraphQL query generation expert. Given a natural language
      question and relevant database\n schemas, generate a precise GraphQL query to
      answer the question.\n\n## Question:\n{{ question }}\n\n## Relevant Schemas:\n{%
      for schema in schemas %}\n**{{ schema.name }}**: {{ schema.description }}\nFields:\n{%
      for field in schema.fields %}\n- {{ field.name }} ({{ field.type }}){% if field.description
      %}: {{ field.description }}{% endif\n%}{% if field.primary_key %} [PRIMARY KEY]{%
      endif %}{% if field.required %} [REQUIRED]{% endif \n%}{% if field.indexed %}
      [INDEXED]{% endif %}{% if field.enum_values %} [OPTIONS: {{\nfield.enum_values|join('',
      '') }}]{% endif %}\n{% endfor %}\n\n{% endfor %}\n\n## GraphQL Query Rules:\n1.
      Use the schema names as GraphQL query fields (e.g., `customers`, `orders`)\n2.
      Apply filters using the `where` parameter with nested filter objects\n3. Available
      filter operators per field type:\n   - String fields: `eq`, `contains`, `startsWith`,
      `endsWith`, `in`, `not`, `not_in`\n   - Integer/Float fields: `eq`, `gt`, `gte`,
      `lt`, `lte`, `in`, `not`, `not_in`\n4. Use `order_by` for sorting (field name
      as string)\n5. Use `direction` for sort direction: `ASC` or `DESC`\n6. Use `limit`
      to restrict number of results\n7. Select specific fields in the query body\n\n##
      Example GraphQL Queries:\n\n**Question**: \"Show me customers from California\"\n```graphql\nquery
      {\n  customers(where: {state: {eq: \"California\"}}, limit: 100) {\n    customer_id\n    name\n    email\n    state\n  }\n}\n\nQuestion:
      \"Top 10 products by price\"\nquery {\n  products(order_by: \"price\", direction:
      DESC, limit: 10) {\n    product_id\n    name\n    price\n    category\n  }\n}\n\nQuestion:
      \"Recent orders over $100\"\nquery {\n  orders(\n    where: {\n      total_amount:
      {gt: 100}\n      order_date: {gte: \"2024-01-01\"}\n    }\n    order_by: \"order_date\"\n    direction:
      DESC\n    limit: 50\n  ) {\n    order_id\n    customer_id\n    total_amount\n    order_date\n    status\n  }\n}\n\nInstructions:\n\n1.
      Analyze the question to identify:\n  - What data to retrieve (which fields to
      select)\n  - What filters to apply (where conditions)\n  - What sorting is needed
      (order_by, direction)\n  - How many results (limit)\n2. Generate a GraphQL query
      that:\n  - Uses only the provided schema names and field names\n  - Applies
      appropriate filters based on the question\n  - Selects relevant fields for the
      response\n  - Includes reasonable limits (default 100 if not specified)\n3.
      If variables are needed, include them in the response\n\nResponse Format:\n\nReturn
      a JSON object with:\n- \"query\": the GraphQL query string\n- \"variables\":
      object with any GraphQL variables (empty object if none)\n- \"confidence\":
      float between 0.0-1.0 indicating confidence in the query\n\nExample:\n{\n  \"query\":
      \"query { customers(where: {state: {eq: \\\"California\\\"}}, limit: 100) {
      customer_id name\n email state } }\",\n  \"variables\": {},\n  \"confidence\":
      0.95\n}\n\n", "response-type": "json", "schema": {"additionalProperties": false,
      "properties": {"confidence": {"description": "Float between 0.0-1.0 indicating
      confidence in the generated query", "maximum": 1, "minimum": 0, "type": "number"},
      "query": {"description": "The GraphQL query string generated to answer the question",
      "type": "string"}, "variables": {"additionalProperties": true, "description":
      "Object containing any GraphQL variables needed for the query", "type": "object"}},
      "required": ["query", "variables", "confidence"], "type": "object"}}, "template.kg-prompt":
      {"prompt": "Study the following set of knowledge statements. The statements
      are written in Cypher format that has been extracted from a knowledge graph.
      Use only the provided set of knowledge statements in your response. Do not speculate
      if the answer is not found in the provided set of knowledge statements.\n\nHere''s
      the knowledge statements:\n{% for edge in knowledge %}({{edge.s}})-[{{edge.p}}]->({{edge.o}})\n{%endfor%}\n\nUse
      only the provided knowledge statements to respond to the following:\n{{query}}\n",
      "response-type": "text"}, "template.question": {"prompt": "{{question}}"}, "template.schema-selection":
      {"prompt": "You are a database schema selection expert. Given a natural language
      question and available\ndatabase schemas, your job is to identify which schemas
      are most relevant to answer the question.\n\n## Available Schemas:\n{% for schema
      in schemas %}\n**{{ schema.name }}**: {{ schema.description }}\nFields:\n{%
      for field in schema.fields %}\n- {{ field.name }} ({{ field.type }}): {{ field.description
      }}\n{% endfor %}\n\n{% endfor %}\n\n## Question:\n{{ question }}\n\n## Instructions:\n1.
      Analyze the question to understand what data is being requested\n2. Examine
      each schema to understand what data it contains\n3. Select ONLY the schemas
      that are directly relevant to answering the question\n4. Return your answer
      as a JSON array of schema names\n\n## Response Format:\nReturn ONLY a JSON array
      of schema names, nothing else.\nExample: [\"customers\", \"orders\", \"products\"]\n",
      "response-type": "json", "schema": {"description": "An array of schema names
      that are relevant to answering the given question", "items": {"type": "string"},
      "type": "array"}}}, "token-costs": {"anthropic.claude-3-5-sonnet-20240620-v1:0":
      {"input_price": 3e-06, "model_name": "anthropic.claude-3-5-sonnet-20240620-v1:0",
      "output_price": 1.5e-05}, "anthropic.claude-3-haiku-20240307-v1:0": {"input_price":
      2.5e-07, "model_name": "anthropic.claude-3-haiku-20240307-v1:0", "output_price":
      1.25e-06}, "c4ai-aya-23-8b": {"input_price": 0, "model_name": "c4ai-aya-23-8b",
      "output_price": 0}, "claude-3-5-sonnet-20240620": {"input_price": 3e-06, "model_name":
      "claude-3-5-sonnet-20240620", "output_price": 1.5e-05}, "claude-3-haiku-20240307":
      {"input_price": 2.5e-07, "model_name": "claude-3-haiku-20240307", "output_price":
      1.25e-06}, "claude-3-opus-20240229": {"input_price": 1.5e-05, "model_name":
      "claude-3-opus-20240229", "output_price": 7.5e-05}, "claude-3-sonnet-20240229":
      {"input_price": 3e-06, "model_name": "claude-3-sonnet-20240229", "output_price":
      1.5e-05}, "cohere.command-r-plus-v1:0": {"input_price": 3e-06, "model_name":
      "cohere.command-r-plus-v1:0", "output_price": 1.5e-05}, "command-r-08-202":
      {"input_price": 2.5e-06, "model_name": "command-r-08-202", "output_price": 1e-05},
      "gpt-4o": {"input_price": 5e-06, "model_name": "gpt-4o", "output_price": 1.5e-05},
      "gpt-4o-2024-05-13": {"input_price": 5e-06, "model_name": "gpt-4o-2024-05-13",
      "output_price": 1.5e-05}, "gpt-4o-2024-08-06": {"input_price": 2.5e-06, "model_name":
      "gpt-4o-2024-08-06", "output_price": 1e-05}, "gpt-4o-mini": {"input_price":
      1.5e-07, "model_name": "gpt-4o-mini", "output_price": 6e-07}, "llama.cpp": {"input_price":
      0, "model_name": "llama.cpp", "output_price": 0}, "meta.llama3-1-405b-instruct-v1:0":
      {"input_price": 5.32e-06, "model_name": "meta.llama3-1-405b-instruct-v1:0",
      "output_price": 1.6e-05}, "meta.llama3-1-70b-instruct-v1:0": {"input_price":
      9.9e-07, "model_name": "meta.llama3-1-70b-instruct-v1:0", "output_price": 9.9e-07},
      "meta.llama3-1-8b-instruct-v1:0": {"input_price": 2.2e-07, "model_name": "meta.llama3-1-8b-instruct-v1:0",
      "output_price": 2.2e-07}, "mistral.mistral-large-2407-v1:0": {"input_price":
      4e-06, "model_name": "mistral.mistral-large-2407-v1:0", "output_price": 1.2e-05},
      "mistral.mixtral-8x7b-instruct-v0:1": {"input_price": 4.5e-07, "model_name":
      "mistral.mixtral-8x7b-instruct-v0:1", "output_price": 7e-07}, "ollama": {"input_price":
      0, "model_name": "ollama", "output_price": 0}}, "tool": {"knowledge-extraction":
      {"arguments": [{"description": "The text chunk", "name": "text", "type": "string"}],
      "description": "Takes a chunk of text and extracts knowledge in definition and
      relationship formats. The input is a text chunk", "id": "knowledge-extraction",
      "name": "Knowledge extraction", "template": "agent-kg-extract", "type": "prompt"},
      "knowledge-query": {"arguments": [{"description": "A simple natural language
      question.", "name": "question", "type": "string"}], "collection": "default",
      "description": "This tool queries a knowledge base that holds information about
      domain-specific information.  The question should be a natural language question.",
      "id": "knowledge-query", "name": "Knowledge query", "type": "knowledge-query"},
      "llm-completion": {"arguments": [{"description": "The question which should
      be asked of the LLM.", "name": "question", "type": "string"}], "description":
      "This tool queries an LLM for non-domain-specific information.  The question
      should be a natural language question.", "id": "llm-completion", "name": "LLM
      text completion", "type": "text-completion"}}}'
  kind: ConfigMap
  metadata:
    name: trustgraph-cfg
    namespace: trustgraph
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: init-trustgraph
    name: init-trustgraph
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: init-trustgraph
    template:
      metadata:
        labels:
          app: init-trustgraph
      spec:
        containers:
        - command:
          - tg-init-trustgraph
          - -p
          - http://pulsar:8080
          - --config-file
          - /trustgraph/config.json
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: init-trustgraph
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /trustgraph/
            name: trustgraph-cfg
        volumes:
        - configMap:
            name: trustgraph-cfg
          name: trustgraph-cfg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-extract-agent
    name: kg-extract-agent
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-extract-agent
    template:
      metadata:
        labels:
          app: kg-extract-agent
      spec:
        containers:
        - command:
          - kg-extract-agent
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-extract-agent
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-extract-agent
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-extract-agent
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-extract-definitions
    name: kg-extract-definitions
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-extract-definitions
    template:
      metadata:
        labels:
          app: kg-extract-definitions
      spec:
        containers:
        - command:
          - kg-extract-definitions
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-extract-definitions
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-extract-definitions
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-extract-definitions
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-extract-objects
    name: kg-extract-objects
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-extract-objects
    template:
      metadata:
        labels:
          app: kg-extract-objects
      spec:
        containers:
        - command:
          - kg-extract-objects
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-extract-objects
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-extract-objects
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-extract-objects
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-extract-relationships
    name: kg-extract-relationships
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-extract-relationships
    template:
      metadata:
        labels:
          app: kg-extract-relationships
      spec:
        containers:
        - command:
          - kg-extract-relationships
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-extract-relationships
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-extract-relationships
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-extract-relationships
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-manager
    name: kg-manager
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-manager
    template:
      metadata:
        labels:
          app: kg-manager
      spec:
        containers:
        - command:
          - kg-manager
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-manager
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-manager
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-manager
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: kg-store
    name: kg-store
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kg-store
    template:
      metadata:
        labels:
          app: kg-store
      spec:
        containers:
        - command:
          - kg-store
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: kg-store
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: kg-store
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: kg-store
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: librarian
    name: librarian
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: librarian
    template:
      metadata:
        labels:
          app: librarian
      spec:
        containers:
        - command:
          - librarian
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: librarian
          resources:
            limits:
              cpu: '0.5'
              memory: 256M
            requests:
              cpu: '0.1'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: librarian
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: librarian
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: mcp-server
    name: mcp-server
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mcp-server
    template:
      metadata:
        labels:
          app: mcp-server
      spec:
        containers:
        - command:
          - mcp-server
          - --port
          - '8000'
          env:
          - name: MCP_SERVER_SECRET
            valueFrom:
              secretKeyRef:
                key: mcp-server-secret
                name: mcp-server-secret
          image: docker.io/trustgraph/trustgraph-mcp:1.3.18
          name: mcp-server
          ports:
          - containerPort: 8000
            hostPort: 8000
          resources:
            limits:
              cpu: '0.5'
              memory: 256M
            requests:
              cpu: '0.1'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: mcp-server
    namespace: trustgraph
  spec:
    ports:
    - name: mcp
      port: 8000
      targetPort: 8000
    selector:
      app: mcp-server
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: mcp-tool
    name: mcp-tool
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mcp-tool
    template:
      metadata:
        labels:
          app: mcp-tool
      spec:
        containers:
        - command:
          - mcp-tool
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: mcp-tool
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: mcp-tool
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: mcp-tool
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: metering
    name: metering
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: metering
    template:
      metadata:
        labels:
          app: metering
      spec:
        containers:
        - command:
          - metering
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: metering
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: metering
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: metering
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: metering-rag
    name: metering-rag
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: metering-rag
    template:
      metadata:
        labels:
          app: metering-rag
      spec:
        containers:
        - command:
          - metering
          - -p
          - pulsar://pulsar:6650
          - --id
          - metering-rag
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: metering-rag
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: metering-rag
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: metering-rag
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: minio-data
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: minio
    name: minio
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: minio
    template:
      metadata:
        labels:
          app: minio
      spec:
        containers:
        - command:
          - minio
          - server
          - /minio_data
          - --console-address
          - :9001
          env:
          - name: MINIO_ROOT_PASSWORD
            value: minioadmin
          - name: MINIO_ROOT_USER
            value: minioadmin
          image: docker.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
          name: minio
          ports:
          - containerPort: 9000
            hostPort: 9000
          - containerPort: 9001
            hostPort: 9001
          resources:
            limits:
              cpu: '0.5'
              memory: 512M
            requests:
              cpu: '0.25'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /minio_data
            name: minio-data
        volumes:
        - name: minio-data
          persistentVolumeClaim:
            claimName: minio-data
- apiVersion: v1
  kind: Service
  metadata:
    name: minio
    namespace: trustgraph
  spec:
    ports:
    - name: api
      port: 9000
      targetPort: 9000
    - name: console
      port: 9001
      targetPort: 9001
    selector:
      app: minio
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: nlp-query
    name: nlp-query
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nlp-query
    template:
      metadata:
        labels:
          app: nlp-query
      spec:
        containers:
        - command:
          - nlp-query
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: nlp-query
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: nlp-query
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: nlp-query
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: pdf-decoder
    name: pdf-decoder
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: pdf-decoder
    template:
      metadata:
        labels:
          app: pdf-decoder
      spec:
        containers:
        - command:
          - pdf-decoder
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: pdf-decoder
          resources:
            limits:
              cpu: '0.5'
              memory: 512M
            requests:
              cpu: '0.1'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: pdf-decoder
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: pdf-decoder
- apiVersion: v1
  data:
    prometheus.yml: "global:\n\n  scrape_interval:     15s # By default, scrape targets\
      \ every 15 seconds.\n\n  # Attach these labels to any time series or alerts\
      \ when communicating with\n  # external systems (federation, remote storage,\
      \ Alertmanager).\n  external_labels:\n    monitor: 'trustgraph'\n\n# A scrape\
      \ configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus\
      \ itself.\nscrape_configs:\n\n  # The job name is added as a label `job=<job_name>`\
      \ to any timeseries\n  # scraped from this config.\n\n  # TrustGraph services\n\
      \n  - job_name: 'agent-manager'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'agent-manager:8000'\n\n  - job_name: 'api-gateway'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'api-gateway:8000'\n\
      \n  - job_name: 'chunker'\n    scrape_interval: 5s\n    static_configs:\n  \
      \    - targets:\n        - 'chunker:8000'\n\n  - job_name: 'config-svc'\n  \
      \  scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'config-svc:8000'\n\
      \n  - job_name: 'document-embeddings'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'document-embeddings:8000'\n\n  - job_name: 'document-rag'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'document-rag:8000'\n\
      \n  - job_name: 'embeddings'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'embeddings:8000'\n\n  - job_name: 'graph-embeddings'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'graph-embeddings:8000'\n\
      \n  - job_name: 'graph-rag'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'graph-rag:8000'\n\n  - job_name: 'kg-extract-agent'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'kg-extract-agent:8000'\n\
      \n  - job_name: 'kg-extract-definitions'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'kg-extract-definitions:8000'\n\n  - job_name:\
      \ 'kg-extract-objects'\n    scrape_interval: 5s\n    static_configs:\n     \
      \ - targets:\n        - 'kg-extract-objects:8000'\n\n  - job_name: 'kg-extract-relationships'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'kg-extract-relationships:8000'\n\
      \n  - job_name: 'kg-manager'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'kg-manager:8000'\n\n  - job_name: 'kg-store'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'kg-store:8000'\n\
      \n  - job_name: 'librarian'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'librarian:8000'\n\n  - job_name: 'mcp-server'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'mcp-server:8000'\n\
      \n  - job_name: 'mcp-tool'\n    scrape_interval: 5s\n    static_configs:\n \
      \     - targets:\n        - 'mcp-tool:8000'\n\n  - job_name: 'metering'\n  \
      \  scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'metering:8000'\n\
      \n  - job_name: 'metering-rag'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'metering-rag:8000'\n\n  - job_name: 'nlp-query'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'nlp-query:8000'\n\
      \n  - job_name: 'pdf-decoder'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'pdf-decoder:8000'\n\n  - job_name: 'prompt'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'prompt:8000'\n\
      \n  - job_name: 'prompt-rag'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'prompt-rag:8000'\n\n  - job_name: 'query-doc-embeddings'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'query-doc-embeddings:8000'\n\
      \n  - job_name: 'query-graph-embeddings'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'query-graph-embeddings:8000'\n\n  - job_name:\
      \ 'query-objects'\n    scrape_interval: 5s\n    static_configs:\n      - targets:\n\
      \        - 'query-objects:8000'\n\n  - job_name: 'query-triples'\n    scrape_interval:\
      \ 5s\n    static_configs:\n      - targets:\n        - 'query-triples:8000'\n\
      \n  - job_name: 'store-doc-embeddings'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'store-doc-embeddings:8000'\n\n  - job_name: 'store-graph-embeddings'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'store-graph-embeddings:8000'\n\
      \n  - job_name: 'store-objects'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'store-objects:8000'\n\n  - job_name: 'store-triples'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'store-triples:8000'\n\
      \n  - job_name: 'structured-query'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'structured-query:8000'\n\n  - job_name: 'text-completion'\n\
      \    scrape_interval: 5s\n    static_configs:\n      - targets:\n        - 'text-completion:8000'\n\
      \n  - job_name: 'text-completion-rag'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'text-completion-rag:8000'\n\n  # Non-Trustgraph\
      \ services\n  - job_name: 'pulsar'\n    scrape_interval: 5s\n    static_configs:\n\
      \      - targets:\n        - 'pulsar:8080'\n\n"
  kind: ConfigMap
  metadata:
    name: prometheus-cfg
    namespace: trustgraph
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: prometheus-data
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
      spec:
        containers:
        - image: docker.io/prom/prometheus:v2.53.5
          name: prometheus
          ports:
          - containerPort: 9090
            hostPort: 9090
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /etc/prometheus/
            name: prometheus-cfg
          - mountPath: /prometheus
            name: prometheus-data
        volumes:
        - configMap:
            name: prometheus-cfg
          name: prometheus-cfg
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data
- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus
    namespace: trustgraph
  spec:
    ports:
    - name: http
      port: 9090
      targetPort: 9090
    selector:
      app: prometheus
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: prompt
    name: prompt
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prompt
    template:
      metadata:
        labels:
          app: prompt
      spec:
        containers:
        - command:
          - prompt-template
          - -p
          - pulsar://pulsar:6650
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: prompt
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: prompt
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: prompt
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: prompt-rag
    name: prompt-rag
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prompt-rag
    template:
      metadata:
        labels:
          app: prompt-rag
      spec:
        containers:
        - command:
          - prompt-template
          - -p
          - pulsar://pulsar:6650
          - --id
          - prompt-rag
          - --concurrency
          - '1'
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: prompt-rag
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: prompt-rag
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: prompt-rag
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: zookeeper
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1G
    storageClassName: tg
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: bookie
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: zookeeper
    name: zookeeper
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: zookeeper
    template:
      metadata:
        labels:
          app: zookeeper
      spec:
        containers:
        - command:
          - bash
          - -c
          - bin/apply-config-from-env.py conf/zookeeper.conf && bin/generate-zookeeper-config.sh
            conf/zookeeper.conf && exec bin/pulsar zookeeper
          env:
          - name: PULSAR_MEM
            value: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
          - name: metadataStoreUrl
            value: zk:zookeeper:2181
          image: docker.io/apachepulsar/pulsar:4.0.5
          name: zookeeper
          ports:
          - containerPort: 2181
            hostPort: 2181
          - containerPort: 2888
            hostPort: 2888
          - containerPort: 3888
            hostPort: 3888
          resources:
            limits:
              cpu: '1'
              memory: 400M
            requests:
              cpu: '0.05'
              memory: 400M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /pulsar/data/zookeeper
            name: zookeeper
        volumes:
        - name: zookeeper
          persistentVolumeClaim:
            claimName: zookeeper
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: pulsar-init
    name: pulsar-init
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: pulsar-init
    template:
      metadata:
        labels:
          app: pulsar-init
      spec:
        containers:
        - command:
          - bash
          - -c
          - sleep 10 && bin/pulsar initialize-cluster-metadata --cluster cluster-a
            --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url
            http://pulsar:8080 --broker-service-url pulsar://pulsar:6650
          env:
          - name: PULSAR_MEM
            value: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
          image: docker.io/apachepulsar/pulsar:4.0.5
          name: pulsar-init
          resources:
            limits:
              cpu: '1'
              memory: 512M
            requests:
              cpu: '0.05'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: bookie
    name: bookie
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: bookie
    template:
      metadata:
        labels:
          app: bookie
      spec:
        containers:
        - command:
          - bash
          - -c
          - bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie
          env:
          - name: BOOKIE_MEM
            value: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
          - name: advertisedAddress
            value: bookie
          - name: bookieId
            value: bookie
          - name: clusterName
            value: cluster-a
          - name: metadataStoreUri
            value: metadata-store:zk:zookeeper:2181
          - name: zkServers
            value: zookeeper:2181
          image: docker.io/apachepulsar/pulsar:4.0.5
          name: bookie
          ports:
          - containerPort: 3181
            hostPort: 3181
          resources:
            limits:
              cpu: '1'
              memory: 1024M
            requests:
              cpu: '0.1'
              memory: 1024M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /pulsar/data/bookkeeper
            name: bookie
        volumes:
        - name: bookie
          persistentVolumeClaim:
            claimName: bookie
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: pulsar
    name: pulsar
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: pulsar
    template:
      metadata:
        labels:
          app: pulsar
      spec:
        containers:
        - command:
          - bash
          - -c
          - bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker
          env:
          - name: PULSAR_MEM
            value: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
          - name: advertisedAddress
            value: pulsar
          - name: advertisedListeners
            value: external:pulsar://pulsar:6650,localhost:pulsar://localhost:6650
          - name: clusterName
            value: cluster-a
          - name: managedLedgerDefaultAckQuorum
            value: '1'
          - name: managedLedgerDefaultEnsembleSize
            value: '1'
          - name: managedLedgerDefaultWriteQuorum
            value: '1'
          - name: metadataStoreUrl
            value: zk:zookeeper:2181
          - name: zookeeperServers
            value: zookeeper:2181
          image: docker.io/apachepulsar/pulsar:4.0.5
          name: pulsar
          ports:
          - containerPort: 6650
            hostPort: 6650
          - containerPort: 8080
            hostPort: 8080
          resources:
            limits:
              cpu: '1'
              memory: 800M
            requests:
              cpu: '0.1'
              memory: 800M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: zookeeper
    namespace: trustgraph
  spec:
    ports:
    - name: zookeeper
      port: 2181
      targetPort: 2181
    - name: zookeeper2
      port: 2888
      targetPort: 2888
    - name: zookeeper3
      port: 3888
      targetPort: 3888
    selector:
      app: zookeeper
- apiVersion: v1
  kind: Service
  metadata:
    name: bookie
    namespace: trustgraph
  spec:
    ports:
    - name: bookie
      port: 3181
      targetPort: 3181
    selector:
      app: bookie
- apiVersion: v1
  kind: Service
  metadata:
    name: pulsar
    namespace: trustgraph
  spec:
    ports:
    - name: pulsar
      port: 6650
      targetPort: 6650
    - name: admin
      port: 8080
      targetPort: 8080
    selector:
      app: pulsar
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: qdrant
    namespace: trustgraph
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20G
    storageClassName: tg
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qdrant
    name: qdrant
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qdrant
    template:
      metadata:
        labels:
          app: qdrant
      spec:
        containers:
        - image: docker.io/qdrant/qdrant:v1.14.1
          name: qdrant
          ports:
          - containerPort: 6333
            hostPort: 6333
          - containerPort: 6334
            hostPort: 6334
          resources:
            limits:
              cpu: '1.0'
              memory: 1024M
            requests:
              cpu: '0.5'
              memory: 1024M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /qdrant/storage
            name: qdrant
        volumes:
        - name: qdrant
          persistentVolumeClaim:
            claimName: qdrant
- apiVersion: v1
  kind: Service
  metadata:
    name: qdrant
    namespace: trustgraph
  spec:
    ports:
    - name: api
      port: 6333
      targetPort: 6333
    - name: api2
      port: 6334
      targetPort: 6334
    selector:
      app: qdrant
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: query-doc-embeddings
    name: query-doc-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: query-doc-embeddings
    template:
      metadata:
        labels:
          app: query-doc-embeddings
      spec:
        containers:
        - command:
          - de-query-qdrant
          - -p
          - pulsar://pulsar:6650
          - -t
          - http://qdrant:6333
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: query-doc-embeddings
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: query-doc-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: query-doc-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: query-graph-embeddings
    name: query-graph-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: query-graph-embeddings
    template:
      metadata:
        labels:
          app: query-graph-embeddings
      spec:
        containers:
        - command:
          - ge-query-qdrant
          - -p
          - pulsar://pulsar:6650
          - -t
          - http://qdrant:6333
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: query-graph-embeddings
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: query-graph-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: query-graph-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: query-objects
    name: query-objects
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: query-objects
    template:
      metadata:
        labels:
          app: query-objects
      spec:
        containers:
        - command:
          - objects-query-cassandra
          - -p
          - pulsar://pulsar:6650
          - --cassandra-host
          - cassandra
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: query-objects
          resources:
            limits:
              cpu: '0.5'
              memory: 512M
            requests:
              cpu: '0.1'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: query-objects
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: query-objects
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: query-triples
    name: query-triples
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: query-triples
    template:
      metadata:
        labels:
          app: query-triples
      spec:
        containers:
        - command:
          - triples-query-cassandra
          - -p
          - pulsar://pulsar:6650
          - --cassandra-host
          - cassandra
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: query-triples
          resources:
            limits:
              cpu: '0.5'
              memory: 512M
            requests:
              cpu: '0.1'
              memory: 512M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: query-triples
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: query-triples
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: store-doc-embeddings
    name: store-doc-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: store-doc-embeddings
    template:
      metadata:
        labels:
          app: store-doc-embeddings
      spec:
        containers:
        - command:
          - de-write-qdrant
          - -p
          - pulsar://pulsar:6650
          - -t
          - http://qdrant:6333
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: store-doc-embeddings
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: store-doc-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: store-doc-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: store-graph-embeddings
    name: store-graph-embeddings
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: store-graph-embeddings
    template:
      metadata:
        labels:
          app: store-graph-embeddings
      spec:
        containers:
        - command:
          - ge-write-qdrant
          - -p
          - pulsar://pulsar:6650
          - -t
          - http://qdrant:6333
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: store-graph-embeddings
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: store-graph-embeddings
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: store-graph-embeddings
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: store-objects
    name: store-objects
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: store-objects
    template:
      metadata:
        labels:
          app: store-objects
      spec:
        containers:
        - command:
          - objects-write-cassandra
          - -p
          - pulsar://pulsar:6650
          - --cassandra-host
          - cassandra
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: store-objects
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: store-objects
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: store-objects
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: store-triples
    name: store-triples
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: store-triples
    template:
      metadata:
        labels:
          app: store-triples
      spec:
        containers:
        - command:
          - triples-write-cassandra
          - -p
          - pulsar://pulsar:6650
          - --cassandra-host
          - cassandra
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: store-triples
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: store-triples
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: store-triples
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: structured-query
    name: structured-query
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: structured-query
    template:
      metadata:
        labels:
          app: structured-query
      spec:
        containers:
        - command:
          - structured-query
          - -p
          - pulsar://pulsar:6650
          - --log-level
          - DEBUG
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: structured-query
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: structured-query
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: structured-query
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: text-completion
    name: text-completion
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: text-completion
    template:
      metadata:
        labels:
          app: text-completion
      spec:
        containers:
        - command:
          - text-completion-openai
          - -p
          - pulsar://pulsar:6650
          - -x
          - '4096'
          - -t
          - '0.300'
          - -m
          - Mistral-Nemo-Instruct-2407
          - --log-level
          - DEBUG
          env:
          - name: OPENAI_TOKEN
            valueFrom:
              secretKeyRef:
                key: openai-token
                name: openai-credentials
          - name: OPENAI_BASE_URL
            valueFrom:
              secretKeyRef:
                key: openai-url
                name: openai-credentials
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: text-completion
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: text-completion
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: text-completion
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: text-completion-rag
    name: text-completion-rag
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: text-completion-rag
    template:
      metadata:
        labels:
          app: text-completion-rag
      spec:
        containers:
        - command:
          - text-completion-openai
          - -p
          - pulsar://pulsar:6650
          - --id
          - text-completion-rag
          - -x
          - '4096'
          - -t
          - '0.300'
          - -m
          - Mistral-Nemo-Instruct-2407
          - --log-level
          - DEBUG
          env:
          - name: OPENAI_TOKEN
            valueFrom:
              secretKeyRef:
                key: openai-token
                name: openai-credentials
          - name: OPENAI_BASE_URL
            valueFrom:
              secretKeyRef:
                key: openai-url
                name: openai-credentials
          image: docker.io/trustgraph/trustgraph-flow:1.3.18
          name: text-completion-rag
          resources:
            limits:
              cpu: '0.5'
              memory: 128M
            requests:
              cpu: '0.1'
              memory: 128M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: text-completion-rag
    namespace: trustgraph
  spec:
    ports:
    - name: metrics
      port: 8000
      targetPort: 8000
    selector:
      app: text-completion-rag
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: workbench-ui
    name: workbench-ui
    namespace: trustgraph
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: workbench-ui
    template:
      metadata:
        labels:
          app: workbench-ui
      spec:
        containers:
        - image: docker.io/trustgraph/workbench-ui:1.1.2
          name: workbench-ui
          ports:
          - containerPort: 8888
            hostPort: 8888
          resources:
            limits:
              cpu: '0.1'
              memory: 256M
            requests:
              cpu: '0.1'
              memory: 256M
          securityContext:
            runAsGroup: 0
            runAsUser: 0
        volumes: []
- apiVersion: v1
  kind: Service
  metadata:
    name: workbench-ui
    namespace: trustgraph
  spec:
    ports:
    - name: ui
      port: 8888
      targetPort: 8888
    selector:
      app: workbench-ui
kind: List

